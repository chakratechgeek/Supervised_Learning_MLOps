{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8dcc2bc4",
   "metadata": {
    "papermill": {
     "duration": 0.014143,
     "end_time": "2024-07-23T14:46:15.541252",
     "exception": false,
     "start_time": "2024-07-23T14:46:15.527109",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Supervised Learning\n",
    "\n",
    "**Types of Supervised Learning**\n",
    "  1. ***Regression***: is used when the target variable is continuous and we want to predict its value based on the input features. The goal is to learn a function that maps input features to a continuous output variable.\n",
    "  \n",
    "     * **Linear Regression**: Models the relationship between the dependent variable and one or more independent variables using a straight line.\n",
    "     * **Polynomial Regression**: Extends linear regression by modeling the relationship as an nth-degree polynomial.\n",
    "     * **Ridge Regression**: A type of linear regression that includes a regularization term to prevent overfitting.\n",
    "     * **Lasso Regression**: Similar to ridge regression but can also perform feature selection by setting some coefficients to zero.\n",
    "     * **Support Vector Regression (SVR)**: Uses support vector machine algorithms for regression problems.\n",
    "     * **Decision Trees and Random Forests**: Non-linear models that can capture complex relationships between features.\n",
    "\n",
    "\n",
    "  2. ***Classification***:  is used when the target variable is categorical and we want to predict which category or class the input features belong to. The goal is to learn a function that maps input features to discrete class labels.\n",
    "  \n",
    "     * **Logistic Regression**: Models the probability of a binary outcome using a logistic function.\n",
    "     * **K-Nearest Neighbors (KNN)**: Classifies data points based on the classes of their nearest neighbors.\n",
    "     * **Support Vector Machines (SVM)**: Finds the hyperplane that best separates the classes in the feature space.\n",
    "     * **Decision Trees**: Tree-based models that split the data into subsets based on feature values.\n",
    "     * **Random Forests**: An ensemble method that combines multiple decision trees to improve accuracy and prevent overfitting.\n",
    "     * **Naive Bayes**: A probabilistic classifier based on Bayes' theorem with strong independence assumptions between features.\n",
    "     * **Neural Networks**: Deep learning models that can capture complex patterns in data.\n",
    "     \n",
    "#####################################################################################################################################################\n",
    "1. **Data Collection and Preparation**\n",
    "\n",
    " * Gather data \n",
    " * Encode categorical variables if necessary.\n",
    " * Too many unique values in categorical feature is not used, reasons are below.\n",
    "    * **One-Hot Encoding** : Transforming a categorical feature with many unique values into one-hot encoded columns can significantly increase the dimensionality of the dataset.\n",
    "    * **Overfitting** : Models may overfit to the noise in high-cardinality features because they capture a lot of specific information that may not generalize well to new data. \n",
    "    * **Reduced Interpretability** : High-cardinality features can make models less interpretable because it becomes difficult to understand the influence of each unique value.\n",
    "    * **Computational Efficiency** : High-cardinality features increase the size of the dataset and the computational resources required for training, making it impractical for large datasets.\n",
    "\n",
    " * Missing Value handling\n",
    " \n",
    "2. **Exploratory Data Analysis (EDA)**\n",
    "\n",
    " * Understand data distribution (mean, median, mode, standard deviation).\n",
    "    * **Which Features** : Applicable for Numerical, Ordinal and Categorical features \n",
    "    * **Skewness** & **Kurtosis**\n",
    "    \n",
    " * Visualize data using histograms, box plots, scatter plots, etc.\n",
    " * Use various methods to remove outliers \n",
    " * Check for correlations & covariance between features.\n",
    "\n",
    "3. **Check for Assumptions of Linear Regression**\n",
    "\n",
    " * Linearity: The relationship between predictors and the target should be linear.\n",
    "    * **Check**: Scatter plots or correlation coefficients.\n",
    "    * **Measure** : Adjust the model or apply transformations if needed.\n",
    " * Independence: Observations should be independent of each other.\n",
    "    * **Check** : Study design and data collection process.\n",
    "    * **Measure** : Ensure proper randomization and data collection techniques.\n",
    " * Homoscedasticity: Constant variance of the residuals.\n",
    "    * **Check** : Residual plots.\n",
    "    * **Measure** : Plot residuals vs. fitted values and look for a random pattern.\n",
    " * Normality of Residuals: Residuals should be normally distributed.\n",
    "    * **Check** : Q-Q plots or normality tests (e.g., Shapiro-Wilk test).\n",
    "    * **Measure** : Transform data if residuals are not normally distributed.\n",
    " * No Multicollinearity: Predictors should not be highly correlated with each other.\n",
    "    * **Check** : Variance Inflation Factor (VIF).\n",
    "    * **Measure** : Remove or combine highly correlated predictors.\n",
    "\n",
    "\n",
    "4. **Feature Engineering**: Feature engineering is the process of creating new features or modifying existing ones to improve the performance of machine learning models. This involves domain knowledge and creativity to transform raw data into meaningful features.\n",
    "\n",
    "   * **Purpose**\n",
    "     * Enhance model performance by creating features that better represent the underlying patterns in the data.\n",
    "     * Provide additional information that the model can use to make more accurate predictions.\n",
    "     \n",
    "   * **Techniques**:\n",
    "     * **Transformation**: Applying mathematical operations (log, square root, etc.).\n",
    "     * **Encoding**: Converting categorical variables into numerical form (one-hot encoding, label encoding).\n",
    "     * **Binning**: Grouping continuous variables into bins or intervals.\n",
    "     * **Interaction Features**: Creating features that represent the interaction between other features.\n",
    "     * **Date/Time Features**: Extracting information from date and time variables (e.g., day of the week, month, hour).\n",
    "\n",
    "\n",
    "5. **Feature Selection**: Feature selection is the process of selecting a subset of relevant features (variables, predictors) for use in model construction. The goal is to improve model performance and reduce overfitting by removing irrelevant or redundant features.\n",
    "\n",
    "   * **Purpose**:\n",
    "     * Improve model performance by eliminating noise.\n",
    "     * Reduce overfitting by decreasing model complexity.\n",
    "     * Enhance model interpretability.\n",
    "     * Reduce computational cost.\n",
    "     \n",
    "   * **Techniques**:\n",
    "\n",
    "     1. **Filter Methods**: Select features based on statistical tests.\n",
    "        * Examples: Correlation, Chi-Square, ANOVA.   \n",
    "     2. **Wrapper Methods**: Select features based on model performance.\n",
    "        * Examples: Recursive Feature Elimination (RFE), Forward/Backward Selection.\n",
    "     3. **Embedded Methods**: Select features during model training.\n",
    "        * Examples: Lasso Regression, Tree-based methods (e.g., Random Forest, Gradient Boosting).\n",
    "\n",
    "\n",
    "6. **Feature Importance**:  Feature importance refers to techniques that assign a score to each feature based on how useful they are at predicting the target variable. This helps in understanding which features contribute the most to the predictions of the model.\n",
    "   \n",
    "   * **Purpose**:\n",
    "     * Identify the most influential features in making predictions.\n",
    "     * Understand the model's decision-making process.\n",
    "     * Perform feature selection based on importance scores.\n",
    "     \n",
    "   * **Techniques**:\n",
    "\n",
    "     * **Model-Based Methods**: Use models that inherently provide feature importance scores.\n",
    "       * Examples: Decision Trees, Random Forest, Gradient Boosting.\n",
    "       \n",
    "     * **Permutation Importance**: Measure the change in model performance when a feature's values are randomly shuffled.\n",
    "     * **Coefficients**: For linear models, the magnitude of the coefficients can indicate importance.\n",
    "\n",
    "\n",
    "7. **Model Training**\n",
    "\n",
    " * Split data into training and testing sets.\n",
    " * Train the multiple linear regression model.\n",
    "\n",
    "\n",
    "8. **Model Evaluation**\n",
    "\n",
    " * Evaluate the model using metrics like R-squared, adjusted R-squared, Mean Squared Error (MSE), and Root Mean Squared Error (RMSE).\n",
    " * Check residual plots to ensure assumptions are met.\n",
    "\n",
    "\n",
    "9. **Model Interpretation**\n",
    "\n",
    " * Interpret the coefficients to understand the impact of each feature.\n",
    " * Check p-values to determine the significance of each feature.\n",
    "\n",
    "\n",
    "10. **Model Improvement**\n",
    "\n",
    " * Iterate by adding/removing features, transforming variables, or using different algorithms."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "522f67f2",
   "metadata": {
    "papermill": {
     "duration": 0.013489,
     "end_time": "2024-07-23T14:46:15.568681",
     "exception": false,
     "start_time": "2024-07-23T14:46:15.555192",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Encoding Categorical Variables\n",
    "In machine learning, many algorithms require input features to be numeric. Categorical variables, which are often strings or labels representing categories, need to be converted to a numeric format. This process is known as encoding. There are several methods to encode categorical variables, each suitable for different types of categorical data.\n",
    "\n",
    "**Common Methods for Encoding Categorical Variables**\n",
    "1. **Label Encoding**\n",
    "2. **One-Hot Encoding**\n",
    "3. **Ordinal Encoding**\n",
    "4. **Binary Encoding**\n",
    "5. **Frequency Encoding**\n",
    "6. **Target Encoding**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92c6d0c0",
   "metadata": {
    "papermill": {
     "duration": 0.013591,
     "end_time": "2024-07-23T14:46:15.596107",
     "exception": false,
     "start_time": "2024-07-23T14:46:15.582516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Types in Statistics \n",
    "1. **Nominal Data**\n",
    "  **Definition**: is a type of categorical data where the categories do not have an intrinsic order or ranking. It is used to label variables without any quantitative value. Nominal data is purely qualitative and is used for naming or labeling different categories.\n",
    "  * **Characteristics**: No order, labels or names\n",
    "  * **Examples**       : Colors, Gender, Brands\n",
    "  \n",
    "  \n",
    "2. **Ordinal Data**\n",
    "  **Definition**: Ordinal data is categorical data where the categories have a meaningful order or ranking, but the intervals between the categories are not necessarily equal or known.\n",
    "  * **Characteristics**: Meaningful order, unequal intervals\n",
    "  * **Examples**       : Educational levels, Customer satisfaction\n",
    "  \n",
    "3. **Interval Data**\n",
    "  **Definition**: Interval data is numerical data where the intervals between values are equal, but there is no true zero point. This means that you can measure the difference between values, but not the ratio between them.\n",
    "  * **Characteristics**: Equal intervals, no true zero point\n",
    "  * **Examples**       : Temperature (Celsius/Fahrenheit), Dates\n",
    "  \n",
    "4. **Ratio Data**\n",
    "  **Definition**: Ratio data is numerical data where the intervals between values are equal, and there is a true zero point. This means that you can measure both differences and ratios between values.\n",
    "  * **Characteristics**: Equal intervals, true zero point\n",
    "  * **Examples**       : Height, Weight, Distance, Age\n",
    "  \n",
    "  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ee3544e",
   "metadata": {
    "papermill": {
     "duration": 0.013355,
     "end_time": "2024-07-23T14:46:15.623138",
     "exception": false,
     "start_time": "2024-07-23T14:46:15.609783",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Label Encoding \n",
    "Label Encoding is a technique used to convert categorical data into numerical data by assigning each unique category a different integer. It is a simple and effective method for encoding ordinal categorical variables, where the categories have a meaningful order. However, it can also be applied to nominal categorical variables, though with certain caveats.\n",
    "\n",
    "**How Label Encoding Works**\n",
    "Label Encoding assigns an integer value to each category in a column. For example, if you have a column with three categories: \"Red\", \"Green\", and \"Blue\", Label Encoding might assign 0 to \"Red\", 1 to \"Green\", and 2 to \"Blue\".\n",
    "\n",
    "**When to Use Label Encoding**\n",
    "\n",
    "Label Encoding is suitable for:\n",
    "\n",
    "1. **Ordinal Categorical Variables**:\n",
    "\n",
    "  * Variables that have a natural, meaningful order (e.g., \"Low\", \"Medium\", \"High\").\n",
    "  * Example: Rating scales, educational levels, size categories (small, medium, large).\n",
    "  \n",
    "2. **Features with a Small Number of Categories**:\n",
    "\n",
    "  * When the number of unique categories is relatively small, and the encoded integers won't introduce significant bias.\n",
    "  \n",
    "**When Not to Use Label Encoding**\n",
    "\n",
    "Label Encoding is not suitable for:\n",
    "\n",
    "1. **Nominal Categorical Variables with No Inherent Order**:\n",
    "\n",
    "  * Categories that do not have a meaningful order (e.g., \"Red\", \"Green\", \"Blue\").\n",
    "  * Label Encoding can introduce unintended ordinal relationships between categories (e.g., 0 < 1 < 2).\n",
    "  \n",
    "2. **Features with a Large Number of Categories**:\n",
    "\n",
    "  * When the number of unique categories is large, the encoded integers can create high cardinality and potentially introduce bias.\n",
    "\n",
    "3. **When the Model Assumes Ordinal Relationships**:\n",
    "\n",
    "  * Many machine learning models (e.g., linear regression, decision trees) can interpret the encoded integers as having an ordinal relationship, which may not be appropriate for nominal data\n",
    "  \n",
    "  \n",
    "When dealing with label encoded variables, you generally **should not** apply skewness, kurtosis, or transformations like log or Box-Cox. Here’s a detailed explanation of why these steps are usually unnecessary and can be misleading:\n",
    "\n",
    "***Example***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a67f31eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:15.653863Z",
     "iopub.status.busy": "2024-07-23T14:46:15.653427Z",
     "iopub.status.idle": "2024-07-23T14:46:17.619492Z",
     "shell.execute_reply": "2024-07-23T14:46:17.618176Z"
    },
    "papermill": {
     "duration": 1.983823,
     "end_time": "2024-07-23T14:46:17.622062",
     "exception": false,
     "start_time": "2024-07-23T14:46:15.638239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Color  Color_Label\n",
      "0    Red            2\n",
      "1  Green            1\n",
      "2   Blue            0\n",
      "3  Green            1\n",
      "4    Red            2\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Sample DataFrame\n",
    "data = {'Color': ['Red', 'Green', 'Blue', 'Green', 'Red']}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Apply Label Encoding\n",
    "label_encoder = LabelEncoder()\n",
    "df['Color_Label'] = label_encoder.fit_transform(df['Color'])\n",
    "\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cb4ebce",
   "metadata": {
    "papermill": {
     "duration": 0.013823,
     "end_time": "2024-07-23T14:46:17.649833",
     "exception": false,
     "start_time": "2024-07-23T14:46:17.636010",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. One-Hot Encoding\n",
    "One-Hot Encoding creates a separate binary column for each unique category in the original variable. For example, if you have a column with categories \"Red\", \"Green\", and \"Blue\", One-Hot Encoding will create three new columns, one for each color, with binary values indicating the presence or absence of each color.\n",
    "\n",
    "**When to Use One-Hot Encoding**\n",
    "One-Hot Encoding is suitable for:\n",
    "\n",
    "1. **Nominal Categorical Variables**:\n",
    "\n",
    "  * Variables where the categories do not have a meaningful order (e.g., colors, countries, product types).\n",
    "  \n",
    "2. **Categorical Variables with a Relatively Small Number of Categories**:\n",
    "\n",
    "  * When the number of unique categories is manageable, and creating multiple binary columns does not significantly increase the dimensionality of the dataset.\n",
    "  \n",
    "**When Not to Use One-Hot Encoding**\n",
    "One-Hot Encoding may not be suitable for:\n",
    "\n",
    "1. **Categorical Variables with a Large Number of Categories**:\n",
    "\n",
    "  * When the number of unique categories is very large (e.g., zip codes, user IDs), One-Hot Encoding can lead to a high-dimensional sparse matrix, which can be computationally expensive and may cause the model to overfit.\n",
    "  \n",
    "2. **Ordinal Categorical Variables**:\n",
    "\n",
    "  * For variables with a meaningful order (e.g., ratings, education levels), use Ordinal Encoding or Label Encoding instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8879dfc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:17.679730Z",
     "iopub.status.busy": "2024-07-23T14:46:17.678566Z",
     "iopub.status.idle": "2024-07-23T14:46:17.696337Z",
     "shell.execute_reply": "2024-07-23T14:46:17.695310Z"
    },
    "papermill": {
     "duration": 0.034977,
     "end_time": "2024-07-23T14:46:17.698642",
     "exception": false,
     "start_time": "2024-07-23T14:46:17.663665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Color_Blue  Color_Green  Color_Red\n",
      "0       False        False       True\n",
      "1       False         True      False\n",
      "2        True        False      False\n",
      "3       False         True      False\n",
      "4       False        False       True\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "#pip install --upgrade pandas\n",
    "\n",
    "\n",
    "# Sample DataFrame\n",
    "data = {'Color': ['Red', 'Green', 'Blue', 'Green', 'Red']}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Apply One-Hot Encoding\n",
    "df_encoded = pd.get_dummies(df, columns=['Color'])\n",
    "\n",
    "print(df_encoded)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbd3c182",
   "metadata": {
    "papermill": {
     "duration": 0.013535,
     "end_time": "2024-07-23T14:46:17.725902",
     "exception": false,
     "start_time": "2024-07-23T14:46:17.712367",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Ordinal Encoding\n",
    "\n",
    "**Ordinal Encoding** is a technique used to convert categorical variables into numerical values, where the categories have a meaningful order or ranking. This method assigns a unique integer to each category based on its order. It is particularly useful for ordinal categorical variables, where the order of categories is important.\n",
    "\n",
    "**How Ordinal Encoding Works**\n",
    "  * ***Identify the Order***: Determine the order of the categories.\n",
    "  * ***Assign Integers***: Assign a unique integer to each category based on the order.\n",
    "  \n",
    "**When to Use Ordinal Encoding**\n",
    "1. **Ordinal Categorical Variables**:\n",
    "\n",
    "  * Variables where the categories have a meaningful order (e.g., \"Low\", \"Medium\", \"High\").\n",
    "  * Example: Ratings, education levels, size categories.\n",
    "  \n",
    "2. **Features with a Small Number of Categories**:\n",
    "\n",
    "  * When the number of unique categories is relatively small, making the encoding manageable.\n",
    "  \n",
    "**When Not to Use Ordinal Encoding**\n",
    "\n",
    "1. **Nominal Categorical Variables**:\n",
    "\n",
    "  * Variables where the categories do not have a meaningful order (e.g., \"Red\", \"Green\", \"Blue\").\n",
    "  * Use One-Hot Encoding instead for such variables.\n",
    "  \n",
    "2. **Features with a Large Number of Categories**:\n",
    "\n",
    "  * When the number of unique categories is large, consider using One-Hot Encoding, Frequency Encoding, or Target Encoding.\n",
    "  \n",
    "***Example***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d69ff903",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:17.755383Z",
     "iopub.status.busy": "2024-07-23T14:46:17.754990Z",
     "iopub.status.idle": "2024-07-23T14:46:17.766395Z",
     "shell.execute_reply": "2024-07-23T14:46:17.765340Z"
    },
    "papermill": {
     "duration": 0.029157,
     "end_time": "2024-07-23T14:46:17.768761",
     "exception": false,
     "start_time": "2024-07-23T14:46:17.739604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Size  Size_Ordinal\n",
      "0   Small             1\n",
      "1  Medium             2\n",
      "2   Large             3\n",
      "3  Medium             2\n",
      "4   Small             1\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Sample DataFrame with an ordinal categorical variable\n",
    "data = {'Size': ['Small', 'Medium', 'Large', 'Medium', 'Small']}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Define the order of categories\n",
    "size_mapping = {'Small': 1, 'Medium': 2, 'Large': 3}\n",
    "\n",
    "# Apply Ordinal Encoding\n",
    "df['Size_Ordinal'] = df['Size'].map(size_mapping)\n",
    "\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d82ff54",
   "metadata": {
    "papermill": {
     "duration": 0.013592,
     "end_time": "2024-07-23T14:46:17.796128",
     "exception": false,
     "start_time": "2024-07-23T14:46:17.782536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4. Binary Encoding\n",
    "\n",
    "Binary Encoding is a technique that combines the benefits of both Label Encoding and One-Hot Encoding. It first converts the category labels into integer values, then converts these integers into binary code, and finally splits the binary digits into separate columns. This method helps to reduce the dimensionality that can result from One-Hot Encoding, especially when dealing with ***categorical variables with many unique categories***.\n",
    "\n",
    "**How Binary Encoding Works**\n",
    "1. **Label Encoding**: Convert each category into a unique integer.\n",
    "2. **Binary Conversion**: Convert these integers into their binary representation.\n",
    "3. **Binary Columns**: Split the binary digits into separate columns.\n",
    "\n",
    "**When to Use Binary Encoding**\n",
    "1. Nominal Categorical Variables:\n",
    "\n",
    "  * Suitable for variables where the categories do not have a meaningful order (e.g., \"Red\", \"Green\", \"Blue\").\n",
    "  \n",
    "2. Features with a Large Number of Categories:\n",
    "\n",
    "  * Helps to reduce the dimensionality compared to One-Hot Encoding, making it practical for variables with many unique categories.\n",
    "  \n",
    "3. Mixed Data Types:\n",
    "\n",
    "  * Can be used when you have a mix of categorical and numerical data and need to maintain a manageable number of features.\n",
    "  \n",
    "**When Not to Use Binary Encoding**\n",
    "\n",
    "1. Ordinal Categorical Variables:\n",
    "  * For variables with a meaningful order, Ordinal Encoding might be more appropriate.\n",
    "  \n",
    "***Example***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ec2798f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:17.826201Z",
     "iopub.status.busy": "2024-07-23T14:46:17.825176Z",
     "iopub.status.idle": "2024-07-23T14:46:18.477601Z",
     "shell.execute_reply": "2024-07-23T14:46:18.476408Z"
    },
    "papermill": {
     "duration": 0.670079,
     "end_time": "2024-07-23T14:46:18.480229",
     "exception": false,
     "start_time": "2024-07-23T14:46:17.810150",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Category_0  Category_1\n",
      "0           0           1\n",
      "1           1           0\n",
      "2           1           1\n",
      "3           0           1\n",
      "4           1           0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import category_encoders as ce\n",
    "\n",
    "# Sample DataFrame with a nominal categorical variable\n",
    "data = {'Category': ['A', 'B', 'C', 'A', 'B']}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Apply Binary Encoding\n",
    "binary_encoder = ce.BinaryEncoder(cols=['Category'])\n",
    "df_encoded = binary_encoder.fit_transform(df)\n",
    "\n",
    "print(df_encoded)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ab1f488",
   "metadata": {
    "papermill": {
     "duration": 0.013632,
     "end_time": "2024-07-23T14:46:18.507936",
     "exception": false,
     "start_time": "2024-07-23T14:46:18.494304",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Frequency Encoding\n",
    "Frequency Encoding is a technique used to convert categorical variables into numerical values by replacing each category with its frequency or count in the dataset. This method captures the distribution of categories and can be useful in certain machine learning models.\n",
    "\n",
    "**How Frequency Encoding Works**\n",
    "1. Calculate Frequencies: Count the occurrences of each category in the dataset.\n",
    "2. Replace Categories with Frequencies: Replace each category with its corresponding count.\n",
    "\n",
    "**When to Use Frequency Encoding**\n",
    "\n",
    "1. **High-Cardinality Categorical Variables**:\n",
    "\n",
    "  * When the categorical variable has many unique categories, Frequency Encoding can help reduce the dimensionality.\n",
    "  * Example: Zip codes, user IDs.\n",
    "  \n",
    "2. **Certain Machine Learning Models**:\n",
    "\n",
    "  * **Some models can benefit from frequency information, especially when the frequency of a category carries important information**.\n",
    "  * Example: Gradient Boosting Machines, Decision Trees.\n",
    "  \n",
    "**When Not to Use Frequency Encoding**\n",
    "\n",
    "1. **Ordinal Categorical Variables**:\n",
    "\n",
    "  * For ordinal data, where the order of categories matters, use Ordinal Encoding instead.\n",
    "  * Example: Ratings, education levels.\n",
    "  \n",
    "2. **Nominal Categorical Variables for Certain Models**:\n",
    "\n",
    "  * Some models may misinterpret the frequency as a ranking or ordinal value, which may not be appropriate.\n",
    "  * Example: Linear models where the magnitude of the encoded value could introduce unintended bias.\n",
    "  \n",
    "***Example***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "77203c07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:18.537817Z",
     "iopub.status.busy": "2024-07-23T14:46:18.537273Z",
     "iopub.status.idle": "2024-07-23T14:46:18.550642Z",
     "shell.execute_reply": "2024-07-23T14:46:18.549591Z"
    },
    "papermill": {
     "duration": 0.031193,
     "end_time": "2024-07-23T14:46:18.553221",
     "exception": false,
     "start_time": "2024-07-23T14:46:18.522028",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Frequency Encoding Mapping:\n",
      "Color\n",
      "Red      2\n",
      "Green    2\n",
      "Blue     1\n",
      "Name: count, dtype: int64\n",
      "\n",
      "DataFrame with Frequency Encoding:\n",
      "   Color  Color_Frequency\n",
      "0    Red                2\n",
      "1  Green                2\n",
      "2   Blue                1\n",
      "3  Green                2\n",
      "4    Red                2\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Sample DataFrame with a categorical variable\n",
    "data = {'Color': ['Red', 'Green', 'Blue', 'Green', 'Red']}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate the frequency of each category\n",
    "frequency_encoding = df['Color'].value_counts()\n",
    "print(\"Frequency Encoding Mapping:\")\n",
    "print(frequency_encoding)\n",
    "\n",
    "# Apply Frequency Encoding\n",
    "df['Color_Frequency'] = df['Color'].map(frequency_encoding)\n",
    "\n",
    "print(\"\\nDataFrame with Frequency Encoding:\")\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2001d782",
   "metadata": {
    "papermill": {
     "duration": 0.01364,
     "end_time": "2024-07-23T14:46:18.581093",
     "exception": false,
     "start_time": "2024-07-23T14:46:18.567453",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 6. Target Encoding OR Mean Encoding\n",
    "\n",
    "**Target Encoding** (also known as Mean Encoding) is a technique used to convert categorical variables into numerical values by replacing each category with the mean of the target variable for that category. This method can capture the relationship between the categorical feature and the target variable, which can be particularly useful in supervised learning tasks.\n",
    "\n",
    "**How Target Encoding Works**\n",
    "1. **Calculate the Mean of the Target Variable for Each Category**: Group the data by the categorical variable and calculate the mean of the target variable for each group.\n",
    "2. **Replace Categories with the Calculated Mean**: Replace each category in the categorical variable with its corresponding mean of the target variable.\n",
    "\n",
    "**When to Use Target Encoding**\n",
    "1. **Supervised Learning Tasks**:\n",
    "\n",
    "  * When there is a strong relationship between the categorical feature and the target variable.\n",
    "  * Example: Predicting house prices, customer churn, etc.\n",
    "  \n",
    "2. **High-Cardinality Categorical Variables**:\n",
    "\n",
    "  * When the categorical variable has many unique categories, Target Encoding can help reduce dimensionality.\n",
    "  * Example: Product IDs, user IDs.\n",
    "  \n",
    "**When Not to Use Target Encoding**\n",
    "1. **Unsupervised Learning Tasks**:\n",
    "\n",
    "  * Target Encoding is not applicable as there is no target variable.\n",
    "  * Example: Clustering, dimensionality reduction.\n",
    "  \n",
    "2. **Data Leakage**:\n",
    "\n",
    "  * Be cautious of data leakage. The mean of the target variable should be calculated using only the training data and not the validation or test data.\n",
    "  * Example: If you use the entire dataset to calculate means, you might introduce information from the validation/test set into the training set.\n",
    "  \n",
    "***Example***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4fd70641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:18.610964Z",
     "iopub.status.busy": "2024-07-23T14:46:18.610030Z",
     "iopub.status.idle": "2024-07-23T14:46:18.728487Z",
     "shell.execute_reply": "2024-07-23T14:46:18.727142Z"
    },
    "papermill": {
     "duration": 0.136325,
     "end_time": "2024-07-23T14:46:18.731305",
     "exception": false,
     "start_time": "2024-07-23T14:46:18.594980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame with Target Encoding (Handling Data Leakage):\n",
      "   Color  Price  Color_Target\n",
      "0    Red    1.2           1.1\n",
      "1  Green    3.5           3.6\n",
      "2   Blue    2.8           NaN\n",
      "3  Green    3.6           3.5\n",
      "4    Red    1.1           1.2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/83933954.py:25: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '[3.6 1.2]' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n",
      "  df.loc[val_index, 'Color_Target'] = val_data['Color'].map(target_mean)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "# Sample DataFrame with a categorical variable and a target variable\n",
    "data = {\n",
    "    'Color': ['Red', 'Green', 'Blue', 'Green', 'Red'],\n",
    "    'Price': [1.2, 3.5, 2.8, 3.6, 1.1]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Initialize the KFold cross-validator\n",
    "kf = KFold(n_splits=3, shuffle=True, random_state=42)\n",
    "\n",
    "# Create a new column for the target encoded values\n",
    "df['Color_Target'] = 0\n",
    "\n",
    "for train_index, val_index in kf.split(df):\n",
    "    # Split the data into training and validation sets\n",
    "    train_data, val_data = df.iloc[train_index], df.iloc[val_index]\n",
    "    \n",
    "    # Calculate the mean of the target variable (Price) for each category in Color using the training set\n",
    "    target_mean = train_data.groupby('Color')['Price'].mean()\n",
    "    \n",
    "    # Apply the calculated means to the validation set\n",
    "    df.loc[val_index, 'Color_Target'] = val_data['Color'].map(target_mean)\n",
    "\n",
    "print(\"DataFrame with Target Encoding (Handling Data Leakage):\")\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "066541d2",
   "metadata": {
    "papermill": {
     "duration": 0.014615,
     "end_time": "2024-07-23T14:46:18.760135",
     "exception": false,
     "start_time": "2024-07-23T14:46:18.745520",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Handling Missing Value\n",
    "\n",
    "**Types of Missing Values**\n",
    "\n",
    "1. **Missing Completely at Random (MCAR)**:\n",
    "\n",
    "   * Missing values have no relationship with any other data or variable in the dataset.\n",
    "   * Example: \n",
    "      * A survey respondent randomly skips a question due to oversight.\n",
    "      * During data entry, a few measurements are accidentally omitted or lost, such as recording temperatures or weights in a clinical trial, and these omissions are not related to the actual values.\n",
    "      * Random hardware malfunctions in a network of weather sensors cause occasional data points to be missed, regardless of the weather conditions.\n",
    "  \n",
    "  \n",
    "2. **Missing at Random (MAR)**:\n",
    "\n",
    "   * Missing values are related to some observed data but not to the missing data itself.\n",
    "   * Example: \n",
    "      *  Blood pressure readings are more likely to be missing for patients who do not visit the clinic regularly. However, the frequency of clinic visits is recorded and can explain the missing blood pressure data.\n",
    "      *   Salary information is missing more frequently for younger employees. However, the employees' ages and job titles are recorded, and these variables can explain the missing salary data.\n",
    "      * Test scores are missing more often for students with lower attendance rates. Attendance records are available and can help explain the pattern of missing test scores.\n",
    "     \n",
    "  \n",
    "3. **Missing Not at Random (MNAR)**:\n",
    "\n",
    "  * Missing values are related to the missing data itself.\n",
    "  * Example: \n",
    "      * Patients with severe depression may be less likely to report their mental health status, directly related to the severity of their depression.\n",
    "      * High-income individuals are less likely to disclose their exact earnings due to privacy concerns, so the missing income data is related to the income itself.\n",
    "      * Individuals who consume large amounts of alcohol might skip questions about their alcohol consumption, leading to missing data that is directly related to the amount of alcohol consumed.\n",
    "      \n",
    "      \n",
    "  \n",
    "# Methods for Halnding Missing Values\n",
    "\n",
    "Choosing the right method for handling missing values depends on the nature of the data, the amount and pattern of missingness, and the type of analysis or machine learning algorithm being used. Here’s a detailed guide on when to use each method:\n",
    "\n",
    "**Deletion Methods**: \n",
    "\n",
    "1. **Listwise Deletion**: Listwise deletion (also known as complete case analysis) removes entire rows from the dataset that contain any missing values. This method is straightforward but can result in a significant loss of data, especially if missing values are prevalent.\n",
    "\n",
    "   * **Use When**: The dataset has a small percentage of missing values and the missingness is completely at random (MCAR).\n",
    "   * **Advantages**: Simple and easy to implement. Maintains the integrity of the analysis.\n",
    "   * **Disadvantages**: Can lead to significant data loss, which may reduce statistical power and introduce bias if the missingness is not MCAR.\n",
    "  \n",
    "  \n",
    "2. **Pairwise Deletion**: Pairwise deletion (also known as available case analysis) retains all available data by only excluding missing values on a pairwise basis for specific analyses, such as correlation or covariance calculations. This method ensures that you use as much data as possible without completely discarding rows with missing values.\n",
    "\n",
    "   * **Use When**: Analyzing ***correlations or covariances*** and missing data is not excessive.\n",
    "   * **Advantages**: Retains more data compared to listwise deletion. Uses available data for each pairwise analysis.\n",
    "   * **Disadvantages**: Can lead to inconsistent sample sizes and biased results if the missingness is not MCAR.\n",
    "  \n",
    "  \n",
    "**Imputation Methods**\n",
    "\n",
    "\n",
    "1. **Mean/Median/Mode Imputation**: Use When\n",
    "\n",
    "   1.1 **Mean Imputation**:\n",
    "  \n",
    "     * Use when the data is ***symmetrically distributed***.\n",
    "     * Missing values are assumed to be missing completely at random (MCAR) or missing at random (MAR).\n",
    "     * The dataset is large enough that the mean is not significantly affected by the missing values.\n",
    "    \n",
    "   1.2 **Mediun Imputation**:\n",
    "  \n",
    "     * Use when the data is ***skewed*** (e.g., income, house prices).\n",
    "     * There are outliers present in the data.\n",
    "     * Missing values are assumed to be MCAR or MAR.\n",
    "    \n",
    "   1.3 **Mode Imputation**:\n",
    "  \n",
    "     * Use for ***categorical data***.\n",
    "     * The missing values are assumed to be MCAR or MAR.\n",
    "    \n",
    "    \n",
    "   * **Advantages**: Simple and fast to implement.\n",
    "   * **Disadvantages**: Reduces variability and can introduce bias if the missing values are not MCAR or MAR.\n",
    "  \n",
    "  \n",
    "2. **Forward/Backward Fill**: Forward fill and backward fill are simple imputation techniques used primarily in time series data. These methods fill missing values by carrying the last observed value forward or the next observed value backward.\n",
    "\n",
    "  * **Use When**: Working with ***time series*** data where it makes sense to carry forward or backward the last observed value.\n",
    "    * ***Forward Fill***  -  Suitable when you believe that the missing value should be the same as the last known value.\n",
    "    * ***Backward Fill*** -  Suitable when you believe that the missing value should be the same as the next known value.\n",
    "  * **Advantages**: Simple and preserves temporal sequence.\n",
    "  * **Disadvantages**: Can propagate errors if the missing data spans long periods.\n",
    "  \n",
    "  \n",
    "3. **K-Nearest Neighbors (KNN) Imputation**: is a method that replaces missing values by considering the 'k' nearest neighbors. This approach uses the ***similarities (distances) between data points*** to estimate missing values, making it capable of capturing more complex patterns in the data compared to simple imputation methods like mean or median.\n",
    "\n",
    "  * **Use When**: The dataset is relatively small to medium-sized, and the missingness is assumed to be MCAR or MAR.\n",
    "  * **Advantages**: Can capture more complex patterns in the data compared to simple imputation.\n",
    "  * **Disadvantages**: Computationally intensive and may not perform well with very large datasets or high-dimensional data.\n",
    "  \n",
    "  \n",
    "4. **Multivariate Imputation by Chained Equations (MICE)**:is a sophisticated technique that imputes missing values by modeling each feature with missing values as a function of other features in a dataset. The process is iterative and repeats the imputation process multiple times to improve accuracy.\n",
    "\n",
    "  * **Use When**: The dataset has a mix of numerical and categorical variables, and the missingness is assumed to be MAR.\n",
    "  * **Advantages**: Iteratively models each variable with missing data as a function of other variables, capturing complex relationships.\n",
    "  * **Disadvantages**: Computationally intensive and may require careful parameter tuning.\n",
    "  \n",
    "  \n",
    "5. **Regression Imputation**:  is a technique where missing values in a dataset are predicted using a regression model based on other variables. This method leverages the relationships between variables to estimate the missing data.\n",
    "\n",
    "  * **Use When**: There is a strong linear relationship between the variable with missing values and other variables. Typically used for numerical data but can be extended to categorical data with appropriate modeling.\n",
    "  * **Advantages**: Leverages the relationships between variables to estimate missing values.\n",
    "  * **Disadvantages**: Can underestimate variability and introduce bias if the relationships are not linear or if the missingness is not MAR.\n",
    "  \n",
    "  \n",
    "6. **Stochastic Regression Imputation**:\n",
    "\n",
    "  * **Use When**: \n",
    "    * **Complex Data Relationships**: When you need to capture complex relationships between variables and preserve the natural variability.\n",
    "    * **MAR (Missing At Random)**: Suitable when the missing data mechanism is MAR.\n",
    "    * **Preventing Overfitting**: When you want to avoid overfitting by adding variability to the imputed values.\n",
    "    \n",
    "  * **Advantages**: \n",
    "    * **Preserves Variability**: By adding a random error term, it maintains the natural variability in the data.\n",
    "    * **Reduces Bias**: The random error term helps to reduce the bias introduced by deterministic regression imputation.\n",
    "    * **Captures Relationships**: Utilizes the relationships between variables to provide accurate imputations.\n",
    "    \n",
    "    \n",
    "  * **Disadvantages**: More complex and computationally intensive.\n",
    " \n",
    " \n",
    "**Advanced Methods**\n",
    "1. **Interpolation**:\n",
    "\n",
    "  * **Use When**: The data is time series or spatial data where intermediate values can be estimated.\n",
    "  * **Advantages**: Can be more accurate than simple imputation methods for time series data.\n",
    "  * **Disadvantages**: May not be suitable for non-temporal or non-spatial data.\n",
    "  \n",
    "  \n",
    "2. **Maximum Likelihood**:\n",
    "\n",
    "  * **Use When**: The data follows a known distribution and the parameters of the distribution can be estimated.\n",
    "  * **Advantages**: Statistically efficient and can handle MAR and MNAR.\n",
    "  * **Disadvantages**: Requires a good understanding of the data distribution and more complex to implement.\n",
    "  \n",
    "  \n",
    "3. **Machine Learning Algorithms**:\n",
    "\n",
    "  * **Use When**: The dataset is large and complex, and simple imputation methods are insufficient.\n",
    "  * **Advantages**: Can capture complex patterns and interactions in the data.\n",
    "  * **Disadvantages**: Computationally intensive and requires careful tuning and validation.\n",
    "\n",
    "\n",
    "\n",
    "**Flag and Fill**\n",
    "\n",
    "1. **Flag Missing Values**:\n",
    "\n",
    "  * **Use When**: You want to retain information about which values were missing.\n",
    "  * **Advantages**: Adds a binary indicator for missing values, which can be useful for certain models.\n",
    "  * **Disadvantages**: Adds additional columns, increasing dimensionality.\n",
    "  \n",
    "  \n",
    "2. **Fill Missing Values**:\n",
    "\n",
    "  * **Use When**: After flagging missing values, you impute them using one of the methods above.\n",
    "  * **Advantages**: Combines the benefits of imputation with the information about missingness.\n",
    "  * **Disadvantages**: Requires careful handling to avoid overfitting or bias."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9d82c37d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:18.790908Z",
     "iopub.status.busy": "2024-07-23T14:46:18.789975Z",
     "iopub.status.idle": "2024-07-23T14:46:18.802688Z",
     "shell.execute_reply": "2024-07-23T14:46:18.801479Z"
    },
    "papermill": {
     "duration": 0.030983,
     "end_time": "2024-07-23T14:46:18.805553",
     "exception": false,
     "start_time": "2024-07-23T14:46:18.774570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame:\n",
      "     A    B    C\n",
      "0  1.0  NaN    a\n",
      "1  2.0  2.0    b\n",
      "2  NaN  3.0    b\n",
      "3  4.0  4.0  NaN\n",
      "4  5.0  NaN    a\n",
      "\n",
      "DataFrame After Listwise Deletion:\n",
      "     A    B  C\n",
      "1  2.0  2.0  b\n"
     ]
    }
   ],
   "source": [
    "#Deletion Method \n",
    "#Likewise Deletion Method \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a sample DataFrame with missing values\n",
    "data = {\n",
    "    'A': [1, 2, np.nan, 4, 5],\n",
    "    'B': [np.nan, 2, 3, 4, np.nan],\n",
    "    'C': ['a', 'b', 'b', np.nan, 'a']\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Original DataFrame:\")\n",
    "print(df)\n",
    "# Apply Listwise Deletion\n",
    "df_listwise = df.dropna()\n",
    "\n",
    "print(\"\\nDataFrame After Listwise Deletion:\")\n",
    "print(df_listwise)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "af653e73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:18.836843Z",
     "iopub.status.busy": "2024-07-23T14:46:18.836475Z",
     "iopub.status.idle": "2024-07-23T14:46:19.085703Z",
     "shell.execute_reply": "2024-07-23T14:46:19.084573Z"
    },
    "papermill": {
     "duration": 0.269313,
     "end_time": "2024-07-23T14:46:19.089715",
     "exception": false,
     "start_time": "2024-07-23T14:46:18.820402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame:\n",
      "    X1   X2    X3     X4\n",
      "0  1.2  NaN   1.0   10.0\n",
      "1  2.3  3.3   2.0   20.0\n",
      "2  NaN  4.4   3.0   30.0\n",
      "3  4.5  NaN   4.0   40.0\n",
      "4  5.6  6.6   5.0    NaN\n",
      "5  6.7  7.7  66.0  600.0\n",
      "6  7.8  8.8   NaN   70.0\n",
      "\n",
      "Pairwise Correlation Matrix:\n",
      "          X1        X2        X3        X4\n",
      "X1  1.000000  1.000000  0.688704  0.517901\n",
      "X2  1.000000  1.000000  0.756889  0.488646\n",
      "X3  0.688704  0.756889  1.000000  0.999992\n",
      "X4  0.517901  0.488646  0.999992  1.000000\n",
      "\n",
      "DataFrame After Filling Missing Values in X1:\n",
      "         X1   X2    X3     X4\n",
      "0  1.200000  NaN   1.0   10.0\n",
      "1  2.300000  3.3   2.0   20.0\n",
      "2  2.483333  4.4   3.0   30.0\n",
      "3  4.500000  NaN   4.0   40.0\n",
      "4  5.600000  6.6   5.0    NaN\n",
      "5  6.700000  7.7  66.0  600.0\n",
      "6  7.800000  8.8   NaN   70.0\n",
      "\n",
      "DataFrame After Filling Missing Values in X2:\n",
      "         X1        X2    X3     X4\n",
      "0  1.200000  2.732644   1.0   10.0\n",
      "1  2.300000  3.300000   2.0   20.0\n",
      "2  2.483333  4.400000   3.0   30.0\n",
      "3  4.500000  5.727421   4.0   40.0\n",
      "4  5.600000  6.600000   5.0    NaN\n",
      "5  6.700000  7.700000  66.0  600.0\n",
      "6  7.800000  8.800000   NaN   70.0\n",
      "\n",
      "DataFrame After Filling Missing Values in X3:\n",
      "         X1        X2    X3     X4\n",
      "0  1.200000  2.732644   1.0   10.0\n",
      "1  2.300000  3.300000   2.0   20.0\n",
      "2  2.483333  4.400000   3.0   30.0\n",
      "3  4.500000  5.727421   4.0   40.0\n",
      "4  5.600000  6.600000   5.0    NaN\n",
      "5  6.700000  7.700000  66.0  600.0\n",
      "6  7.800000  8.800000  13.5   70.0\n",
      "\n",
      "DataFrame After Filling Missing Values in X4:\n",
      "         X1        X2    X3          X4\n",
      "0  1.200000  2.732644   1.0   10.000000\n",
      "1  2.300000  3.300000   2.0   20.000000\n",
      "2  2.483333  4.400000   3.0   30.000000\n",
      "3  4.500000  5.727421   4.0   40.000000\n",
      "4  5.600000  6.600000   5.0  197.248031\n",
      "5  6.700000  7.700000  66.0  600.000000\n",
      "6  7.800000  8.800000  13.5   70.000000\n",
      "\n",
      "Final DataFrame After Filling All Missing Values:\n",
      "         X1        X2    X3          X4\n",
      "0  1.200000  2.732644   1.0   10.000000\n",
      "1  2.300000  3.300000   2.0   20.000000\n",
      "2  2.483333  4.400000   3.0   30.000000\n",
      "3  4.500000  5.727421   4.0   40.000000\n",
      "4  5.600000  6.600000   5.0  197.248031\n",
      "5  6.700000  7.700000  66.0  600.000000\n",
      "6  7.800000  8.800000  13.5   70.000000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3031174830.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  not_missing_X1['X2'] = imputer.fit_transform(not_missing_X1[['X2']])\n",
      "/tmp/ipykernel_18/3031174830.py:46: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  missing_X1['X2'] = imputer.transform(missing_X1[['X2']])\n",
      "/tmp/ipykernel_18/3031174830.py:65: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  not_missing_X2['X1'] = imputer.fit_transform(not_missing_X2[['X1']])\n",
      "/tmp/ipykernel_18/3031174830.py:72: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  missing_X2['X1'] = imputer.transform(missing_X2[['X1']])\n",
      "/tmp/ipykernel_18/3031174830.py:98: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  not_missing_X4['X1'] = imputer.fit_transform(not_missing_X4[['X1']])\n",
      "/tmp/ipykernel_18/3031174830.py:105: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  missing_X4['X1'] = imputer.transform(missing_X4[['X1']])\n"
     ]
    }
   ],
   "source": [
    "#Deletion Method \n",
    "#Pairwise Deletion Method \n",
    "# Create a Sample DataFrame with Missing Values\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a sample DataFrame with missing values\n",
    "data = {\n",
    "    'X1': [1.2, 2.3, np.nan, 4.5, 5.6, 6.7, 7.8],\n",
    "    'X2': [np.nan, 3.3, 4.4, np.nan, 6.6, 7.7, 8.8],  # Well-correlated with X1\n",
    "    'X3': [1, 2, 3, 4, 5, 66, np.nan],  # Poorly correlated with X1 and X2\n",
    "    'X4': [10, 20, 30, 40, np.nan, 600, 70]  # Moderately correlated with X1 and X2\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Original DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# Calculate the pairwise correlation matrix\n",
    "correlation_matrix = df.corr(method='pearson', min_periods=1)\n",
    "\n",
    "print(\"\\nPairwise Correlation Matrix:\")\n",
    "print(correlation_matrix)\n",
    "\n",
    "#Filling Missing Values in Column X1 Using Column X2\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Impute missing values for predictor columns\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "\n",
    "# Data where X1 is not missing\n",
    "not_missing_X1 = df[df['X1'].notna()]\n",
    "\n",
    "# Data where X1 is missing\n",
    "missing_X1 = df[df['X1'].isna()]\n",
    "\n",
    "# Impute missing values in X2 using the mean\n",
    "not_missing_X1['X2'] = imputer.fit_transform(not_missing_X1[['X2']])\n",
    "\n",
    "# Fit a linear regression model to predict X1 using X2\n",
    "model_X1 = LinearRegression()\n",
    "model_X1.fit(not_missing_X1[['X2']], not_missing_X1['X1'])\n",
    "\n",
    "# Impute missing values in X2 for the rows where X1 is missing\n",
    "missing_X1['X2'] = imputer.transform(missing_X1[['X2']])\n",
    "\n",
    "# Predict missing values of X1\n",
    "predicted_X1 = model_X1.predict(missing_X1[['X2']])\n",
    "\n",
    "# Fill the missing values in X1\n",
    "df.loc[df['X1'].isna(), 'X1'] = predicted_X1\n",
    "\n",
    "print(\"\\nDataFrame After Filling Missing Values in X1:\")\n",
    "print(df)\n",
    "\n",
    "#Filling Missing Values in Column X2 Using Column X1\n",
    "# Data where X2 is not missing\n",
    "not_missing_X2 = df[df['X2'].notna()]\n",
    "\n",
    "# Data where X2 is missing\n",
    "missing_X2 = df[df['X2'].isna()]\n",
    "\n",
    "# Impute missing values in X1 using the mean\n",
    "not_missing_X2['X1'] = imputer.fit_transform(not_missing_X2[['X1']])\n",
    "\n",
    "# Fit a linear regression model to predict X2 using X1\n",
    "model_X2 = LinearRegression()\n",
    "model_X2.fit(not_missing_X2[['X1']], not_missing_X2['X2'])\n",
    "\n",
    "# Impute missing values in X1 for the rows where X2 is missing\n",
    "missing_X2['X1'] = imputer.transform(missing_X2[['X1']])\n",
    "\n",
    "# Predict missing values of X2\n",
    "predicted_X2 = model_X2.predict(missing_X2[['X1']])\n",
    "\n",
    "# Fill the missing values in X2\n",
    "df.loc[df['X2'].isna(), 'X2'] = predicted_X2\n",
    "\n",
    "print(\"\\nDataFrame After Filling Missing Values in X2:\")\n",
    "print(df)\n",
    "\n",
    "#Filling Missing Values in Column X3 Using Mean Imputation\n",
    "# Impute missing values in X3 using the mean\n",
    "df['X3'] = imputer.fit_transform(df[['X3']])\n",
    "\n",
    "print(\"\\nDataFrame After Filling Missing Values in X3:\")\n",
    "print(df)\n",
    "\n",
    "#Filling Missing Values in Column X4 Using Column X1\n",
    "# Data where X4 is not missing\n",
    "not_missing_X4 = df[df['X4'].notna()]\n",
    "\n",
    "# Data where X4 is missing\n",
    "missing_X4 = df[df['X4'].isna()]\n",
    "\n",
    "# Impute missing values in X1 using the mean\n",
    "not_missing_X4['X1'] = imputer.fit_transform(not_missing_X4[['X1']])\n",
    "\n",
    "# Fit a linear regression model to predict X4 using X1\n",
    "model_X4 = LinearRegression()\n",
    "model_X4.fit(not_missing_X4[['X1']], not_missing_X4['X4'])\n",
    "\n",
    "# Impute missing values in X1 for the rows where X4 is missing\n",
    "missing_X4['X1'] = imputer.transform(missing_X4[['X1']])\n",
    "\n",
    "# Predict missing values of X4\n",
    "predicted_X4 = model_X4.predict(missing_X4[['X1']])\n",
    "\n",
    "# Fill the missing values in X4\n",
    "df.loc[df['X4'].isna(), 'X4'] = predicted_X4\n",
    "\n",
    "print(\"\\nDataFrame After Filling Missing Values in X4:\")\n",
    "print(df)\n",
    "\n",
    "#Final DF\n",
    "print(\"\\nFinal DataFrame After Filling All Missing Values:\")\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c7c9e2ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:19.121347Z",
     "iopub.status.busy": "2024-07-23T14:46:19.120380Z",
     "iopub.status.idle": "2024-07-23T14:46:19.158192Z",
     "shell.execute_reply": "2024-07-23T14:46:19.157104Z"
    },
    "papermill": {
     "duration": 0.056656,
     "end_time": "2024-07-23T14:46:19.161029",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.104373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Symmetrical DataFrame:\n",
      "    Age    Income\n",
      "0  25.0   50000.0\n",
      "1  30.0   60000.0\n",
      "2   NaN   70000.0\n",
      "3  35.0       NaN\n",
      "4  40.0   90000.0\n",
      "5  45.0  100000.0\n",
      "6   NaN  110000.0\n",
      "\n",
      "DataFrame After Mean Imputation:\n",
      "    Age    Income\n",
      "0  25.0   50000.0\n",
      "1  30.0   60000.0\n",
      "2  35.0   70000.0\n",
      "3  35.0   80000.0\n",
      "4  40.0   90000.0\n",
      "5  45.0  100000.0\n",
      "6  35.0  110000.0\n",
      "\n",
      "Original Skewed DataFrame:\n",
      "    Age  Income\n",
      "0  25.0   50000\n",
      "1  30.0   60000\n",
      "2   NaN   70000\n",
      "3  35.0  800000\n",
      "4  40.0   90000\n",
      "5  45.0  100000\n",
      "6   NaN  110000\n",
      "\n",
      "DataFrame After Median Imputation:\n",
      "    Age    Income\n",
      "0  25.0   50000.0\n",
      "1  30.0   60000.0\n",
      "2  35.0   70000.0\n",
      "3  35.0  800000.0\n",
      "4  40.0   90000.0\n",
      "5  45.0  100000.0\n",
      "6  35.0  110000.0\n",
      "\n",
      "Original Categorical DataFrame:\n",
      "  Category\n",
      "0        A\n",
      "1        B\n",
      "2        B\n",
      "3        A\n",
      "4      NaN\n",
      "5        B\n",
      "6        A\n",
      "\n",
      "DataFrame After Mode Imputation:\n",
      "  Category\n",
      "0        A\n",
      "1        B\n",
      "2        B\n",
      "3        A\n",
      "4      NaN\n",
      "5        B\n",
      "6        A\n"
     ]
    }
   ],
   "source": [
    "#MEAN/MEDIAN/MODE Imputation example\n",
    "#Scenario 1: Symmetrically Distributed Data (Mean Imputation)\n",
    "#DataFrame with Symmetrically Distributed Data\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a sample DataFrame with missing values\n",
    "data_sym = {\n",
    "    'Age': [25, 30, np.nan, 35, 40, 45, np.nan],\n",
    "    'Income': [50000, 60000, 70000, np.nan, 90000, 100000, 110000]\n",
    "}\n",
    "df_sym = pd.DataFrame(data_sym)\n",
    "\n",
    "print(\"Original Symmetrical DataFrame:\")\n",
    "print(df_sym)\n",
    "\n",
    "#Apply Mean Imputation\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Mean Imputation for Age and Income columns\n",
    "mean_imputer = SimpleImputer(strategy='mean')\n",
    "df_sym['Age'] = mean_imputer.fit_transform(df_sym[['Age']])\n",
    "df_sym['Income'] = mean_imputer.fit_transform(df_sym[['Income']])\n",
    "\n",
    "print(\"\\nDataFrame After Mean Imputation:\")\n",
    "print(df_sym)\n",
    "\n",
    "#Scenario 2: Skewed Data with Outliers (Median Imputation)\n",
    "#DataFrame with Skewed Data and Outliers\n",
    "# Create a sample DataFrame with missing values and skewed data\n",
    "data_skew = {\n",
    "    'Age': [25, 30, np.nan, 35, 40, 45, np.nan],\n",
    "    'Income': [50000, 60000, 70000, 800000, 90000, 100000, 110000]  # Outlier in Income\n",
    "}\n",
    "df_skew = pd.DataFrame(data_skew)\n",
    "\n",
    "print(\"\\nOriginal Skewed DataFrame:\")\n",
    "print(df_skew)\n",
    "#Apply Median Imputation\n",
    "# Median Imputation for Age and Income columns\n",
    "median_imputer = SimpleImputer(strategy='median')\n",
    "df_skew['Age'] = median_imputer.fit_transform(df_skew[['Age']])\n",
    "df_skew['Income'] = median_imputer.fit_transform(df_skew[['Income']])\n",
    "\n",
    "print(\"\\nDataFrame After Median Imputation:\")\n",
    "print(df_skew)\n",
    "\n",
    "#Scenario 3: Categorical Data (Mode Imputation)\n",
    "#DataFrame with Categorical Data\n",
    "# Create a sample DataFrame with missing values in a categorical column\n",
    "data_cat = {\n",
    "    'Category': ['A', 'B', 'B', 'A', np.nan, 'B', 'A']\n",
    "}\n",
    "df_cat = pd.DataFrame(data_cat)\n",
    "\n",
    "print(\"\\nOriginal Categorical DataFrame:\")\n",
    "print(df_cat)\n",
    "#Apply Mode Imputation\n",
    "# Mode Imputation for Category column\n",
    "#mode_imputer = SimpleImputer(strategy='most_frequent')\n",
    "#df_cat['Category'] = mode_imputer.fit_transform(df_cat[['Category']])\n",
    "\n",
    "print(\"\\nDataFrame After Mode Imputation:\")\n",
    "print(df_cat)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3897d1a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:19.192404Z",
     "iopub.status.busy": "2024-07-23T14:46:19.191989Z",
     "iopub.status.idle": "2024-07-23T14:46:19.216935Z",
     "shell.execute_reply": "2024-07-23T14:46:19.215846Z"
    },
    "papermill": {
     "duration": 0.04424,
     "end_time": "2024-07-23T14:46:19.220236",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.175996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Time Series DataFrame:\n",
      "        Date  Stock_Price\n",
      "0 2023-01-01        100.0\n",
      "1 2023-01-02          NaN\n",
      "2 2023-01-03          NaN\n",
      "3 2023-01-04        105.0\n",
      "4 2023-01-05          NaN\n",
      "5 2023-01-06        110.0\n",
      "6 2023-01-07          NaN\n",
      "7 2023-01-08          NaN\n",
      "8 2023-01-09          NaN\n",
      "9 2023-01-10        115.0\n",
      "\n",
      "DataFrame After Forward Fill Imputation:\n",
      "        Date  Stock_Price\n",
      "0 2023-01-01        100.0\n",
      "1 2023-01-02        100.0\n",
      "2 2023-01-03        100.0\n",
      "3 2023-01-04        105.0\n",
      "4 2023-01-05        105.0\n",
      "5 2023-01-06        110.0\n",
      "6 2023-01-07        110.0\n",
      "7 2023-01-08        110.0\n",
      "8 2023-01-09        110.0\n",
      "9 2023-01-10        115.0\n",
      "\n",
      "DataFrame After Backward Fill Imputation:\n",
      "        Date  Stock_Price\n",
      "0 2023-01-01        100.0\n",
      "1 2023-01-02        105.0\n",
      "2 2023-01-03        105.0\n",
      "3 2023-01-04        105.0\n",
      "4 2023-01-05        110.0\n",
      "5 2023-01-06        110.0\n",
      "6 2023-01-07        115.0\n",
      "7 2023-01-08        115.0\n",
      "8 2023-01-09        115.0\n",
      "9 2023-01-10        115.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/1932433021.py:18: FutureWarning: Series.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  df_ffill['Stock_Price'] = df_ffill['Stock_Price'].fillna(method='ffill')\n",
      "/tmp/ipykernel_18/1932433021.py:26: FutureWarning: Series.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "  df_bfill['Stock_Price'] = df_bfill['Stock_Price'].fillna(method='bfill')\n"
     ]
    }
   ],
   "source": [
    "#Forward/Backward Fill\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a sample time series DataFrame with missing values\n",
    "date_range = pd.date_range(start='2023-01-01', periods=10, freq='D')\n",
    "data = {\n",
    "    'Date': date_range,\n",
    "    'Stock_Price': [100, np.nan, np.nan, 105, np.nan, 110, np.nan, np.nan, np.nan, 115]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Original Time Series DataFrame:\")\n",
    "print(df)\n",
    "# Apply Forward Fill Imputation\n",
    "# Forward Fill Imputation\n",
    "df_ffill = df.copy()\n",
    "df_ffill['Stock_Price'] = df_ffill['Stock_Price'].fillna(method='ffill')\n",
    "\n",
    "print(\"\\nDataFrame After Forward Fill Imputation:\")\n",
    "print(df_ffill)\n",
    "\n",
    "# Apply Backward Fill Imputation\n",
    "# Backward Fill Imputation\n",
    "df_bfill = df.copy()\n",
    "df_bfill['Stock_Price'] = df_bfill['Stock_Price'].fillna(method='bfill')\n",
    "\n",
    "print(\"\\nDataFrame After Backward Fill Imputation:\")\n",
    "print(df_bfill)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d810fdc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:19.253504Z",
     "iopub.status.busy": "2024-07-23T14:46:19.253111Z",
     "iopub.status.idle": "2024-07-23T14:46:19.281311Z",
     "shell.execute_reply": "2024-07-23T14:46:19.280083Z"
    },
    "papermill": {
     "duration": 0.048601,
     "end_time": "2024-07-23T14:46:19.283679",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.235078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame with Missing Values:\n",
      "   Rooms  LotSize  YearBuilt     Price\n",
      "0    3.0   5000.0     2000.0  300000.0\n",
      "1    4.0   6000.0     1995.0  400000.0\n",
      "2    NaN   7000.0     2010.0  500000.0\n",
      "3    3.0      NaN     2005.0  350000.0\n",
      "4    5.0  10000.0     2015.0       NaN\n",
      "5    4.0   8000.0     2000.0  450000.0\n",
      "6    NaN   6000.0     2005.0  420000.0\n",
      "7    3.0      NaN     2010.0  390000.0\n",
      "8    4.0   7000.0        NaN  410000.0\n",
      "9    5.0   9000.0     2015.0       NaN\n",
      "\n",
      "DataFrame After KNN Imputation:\n",
      "   Rooms  LotSize  YearBuilt     Price\n",
      "0    3.0   5000.0     2000.0  300000.0\n",
      "1    4.0   6000.0     1995.0  400000.0\n",
      "2    5.0   7000.0     2010.0  500000.0\n",
      "3    3.0   9500.0     2005.0  350000.0\n",
      "4    5.0  10000.0     2015.0  370000.0\n",
      "5    4.0   8000.0     2000.0  450000.0\n",
      "6    5.0   6000.0     2005.0  420000.0\n",
      "7    3.0   9500.0     2010.0  390000.0\n",
      "8    4.0   7000.0     2015.0  410000.0\n",
      "9    5.0   9000.0     2015.0  370000.0\n"
     ]
    }
   ],
   "source": [
    "#K-Nearest Neighbors (KNN) Imputation\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a realistic sample DataFrame with missing values\n",
    "data = {\n",
    "    'Rooms': [3, 4, np.nan, 3, 5, 4, np.nan, 3, 4, 5],\n",
    "    'LotSize': [5000, 6000, 7000, np.nan, 10000, 8000, 6000, np.nan, 7000, 9000],\n",
    "    'YearBuilt': [2000, 1995, 2010, 2005, 2015, 2000, 2005, 2010, np.nan, 2015],\n",
    "    'Price': [300000, 400000, 500000, 350000, np.nan, 450000, 420000, 390000, 410000, np.nan]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Original DataFrame with Missing Values:\")\n",
    "print(df)\n",
    "#To impute the missing values using KNN imputation, we need to initialize the KNNImputer and apply it to our DataFrame.\n",
    "from sklearn.impute import KNNImputer\n",
    "\n",
    "# Initialize the KNN imputer with a chosen number of neighbors\n",
    "knn_imputer = KNNImputer(n_neighbors=2)\n",
    "\n",
    "# Apply the KNN imputer to the DataFrame\n",
    "df_imputed = pd.DataFrame(knn_imputer.fit_transform(df), columns=df.columns)\n",
    "\n",
    "print(\"\\nDataFrame After KNN Imputation:\")\n",
    "print(df_imputed)\n",
    "\n",
    "#Rooms: Missing values are imputed based on the average of the nearest neighbors' Rooms.\n",
    "#LotSize: Missing values are imputed based on the average of the nearest neighbors' LotSize.\n",
    "#YearBuilt: Missing values are imputed based on the average of the nearest neighbors' YearBuilt.\n",
    "#Price: Missing values are imputed based on the average of the nearest neighbors' Price."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fb5a7000",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:19.315615Z",
     "iopub.status.busy": "2024-07-23T14:46:19.315224Z",
     "iopub.status.idle": "2024-07-23T14:46:19.368748Z",
     "shell.execute_reply": "2024-07-23T14:46:19.367667Z"
    },
    "papermill": {
     "duration": 0.072159,
     "end_time": "2024-07-23T14:46:19.370970",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.298811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame with Missing Values:\n",
      "   Rooms  LotSize  YearBuilt     Price\n",
      "0    3.0   5000.0     2000.0  300000.0\n",
      "1    4.0   6000.0     1995.0  400000.0\n",
      "2    NaN   7000.0     2010.0  500000.0\n",
      "3    3.0      NaN     2005.0  350000.0\n",
      "4    5.0  10000.0     2015.0       NaN\n",
      "5    4.0   8000.0     2000.0  450000.0\n",
      "6    NaN   6000.0     2005.0  420000.0\n",
      "7    3.0      NaN     2010.0  390000.0\n",
      "8    4.0   7000.0        NaN  410000.0\n",
      "9    5.0   9000.0     2015.0       NaN\n",
      "\n",
      "DataFrame After MICE Imputation:\n",
      "      Rooms       LotSize    YearBuilt          Price\n",
      "0  3.000000   5000.000000  2000.000000  300000.000000\n",
      "1  4.000000   6000.000000  1995.000000  400000.000000\n",
      "2  4.592029   7000.000000  2010.000000  500000.000000\n",
      "3  3.000000   5566.690549  2005.000000  350000.000000\n",
      "4  5.000000  10000.000000  2015.000000  575717.968173\n",
      "5  4.000000   8000.000000  2000.000000  450000.000000\n",
      "6  3.881060   6000.000000  2005.000000  420000.000000\n",
      "7  3.000000   6253.915951  2010.000000  390000.000000\n",
      "8  4.000000   7000.000000  2004.781337  410000.000000\n",
      "9  5.000000   9000.000000  2015.000000  528230.503555\n"
     ]
    }
   ],
   "source": [
    "#Multivariate Imputation by Chained Equations (MICE) Example\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a realistic sample DataFrame with missing values\n",
    "data = {\n",
    "    'Rooms': [3, 4, np.nan, 3, 5, 4, np.nan, 3, 4, 5],\n",
    "    'LotSize': [5000, 6000, 7000, np.nan, 10000, 8000, 6000, np.nan, 7000, 9000],\n",
    "    'YearBuilt': [2000, 1995, 2010, 2005, 2015, 2000, 2005, 2010, np.nan, 2015],\n",
    "    'Price': [300000, 400000, 500000, 350000, np.nan, 450000, 420000, 390000, 410000, np.nan]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Original DataFrame with Missing Values:\")\n",
    "print(df)\n",
    "\n",
    "#Apply MICE Imputation\n",
    "#We will use the IterativeImputer from sklearn.experimental to perform MICE imputation.\n",
    "from sklearn.experimental import enable_iterative_imputer  # noqa\n",
    "from sklearn.impute import IterativeImputer\n",
    "\n",
    "# Initialize the IterativeImputer (MICE)\n",
    "mice_imputer = IterativeImputer(max_iter=10, random_state=0)\n",
    "\n",
    "# Apply the MICE imputer to the DataFrame\n",
    "df_imputed = pd.DataFrame(mice_imputer.fit_transform(df), columns=df.columns)\n",
    "\n",
    "print(\"\\nDataFrame After MICE Imputation:\")\n",
    "print(df_imputed)\n",
    "\n",
    "#Iterative Process: The imputer models each feature with missing values as a function of other features and imputes the missing values iteratively.\n",
    "#Convergence: The process repeats for a specified number of iterations or until the imputed values converge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0d0e9a9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:19.459136Z",
     "iopub.status.busy": "2024-07-23T14:46:19.458760Z",
     "iopub.status.idle": "2024-07-23T14:46:19.538015Z",
     "shell.execute_reply": "2024-07-23T14:46:19.536625Z"
    },
    "papermill": {
     "duration": 0.154909,
     "end_time": "2024-07-23T14:46:19.540891",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.385982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame with Missing Values:\n",
      "   Rooms  LotSize  YearBuilt     Price\n",
      "0    3.0   5000.0     2000.0  300000.0\n",
      "1    4.0   6000.0     1995.0  400000.0\n",
      "2    NaN   7000.0     2010.0  500000.0\n",
      "3    3.0      NaN     2005.0  350000.0\n",
      "4    5.0  10000.0     2015.0       NaN\n",
      "5    4.0   8000.0     2000.0  450000.0\n",
      "6    NaN   6000.0     2005.0  420000.0\n",
      "7    3.0      NaN     2010.0  390000.0\n",
      "8    4.0   7000.0        NaN  410000.0\n",
      "9    5.0   9000.0     2015.0       NaN\n",
      "\n",
      "DataFrame After Imputing Missing Rooms:\n",
      "      Rooms  LotSize  YearBuilt     Price\n",
      "0  3.000000   5000.0     2000.0  300000.0\n",
      "1  4.000000   6000.0     1995.0  400000.0\n",
      "2  3.976922   7000.0     2010.0  500000.0\n",
      "3  3.000000      NaN     2005.0  350000.0\n",
      "4  5.000000  10000.0     2015.0       NaN\n",
      "5  4.000000   8000.0     2000.0  450000.0\n",
      "6  3.410109   6000.0     2005.0  420000.0\n",
      "7  3.000000      NaN     2010.0  390000.0\n",
      "8  4.000000   7000.0        NaN  410000.0\n",
      "9  5.000000   9000.0     2015.0       NaN\n",
      "\n",
      "DataFrame After Imputing Missing LotSize:\n",
      "      Rooms       LotSize  YearBuilt     Price\n",
      "0  3.000000   5000.000000     2000.0  300000.0\n",
      "1  4.000000   6000.000000     1995.0  400000.0\n",
      "2  3.976922   7000.000000     2010.0  500000.0\n",
      "3  3.000000   5149.427367     2005.0  350000.0\n",
      "4  5.000000  10000.000000     2015.0       NaN\n",
      "5  4.000000   8000.000000     2000.0  450000.0\n",
      "6  3.410109   6000.000000     2005.0  420000.0\n",
      "7  3.000000   5403.967846     2010.0  390000.0\n",
      "8  4.000000   7000.000000        NaN  410000.0\n",
      "9  5.000000   9000.000000     2015.0       NaN\n",
      "\n",
      "DataFrame After Imputing Missing YearBuilt:\n",
      "      Rooms       LotSize    YearBuilt     Price\n",
      "0  3.000000   5000.000000  2000.000000  300000.0\n",
      "1  4.000000   6000.000000  1995.000000  400000.0\n",
      "2  3.976922   7000.000000  2010.000000  500000.0\n",
      "3  3.000000   5149.427367  2005.000000  350000.0\n",
      "4  5.000000  10000.000000  2015.000000       NaN\n",
      "5  4.000000   8000.000000  2000.000000  450000.0\n",
      "6  3.410109   6000.000000  2005.000000  420000.0\n",
      "7  3.000000   5403.967846  2010.000000  390000.0\n",
      "8  4.000000   7000.000000  2005.879592  410000.0\n",
      "9  5.000000   9000.000000  2015.000000       NaN\n",
      "\n",
      "DataFrame After Imputing Missing Price:\n",
      "      Rooms       LotSize    YearBuilt          Price\n",
      "0  3.000000   5000.000000  2000.000000  300000.000000\n",
      "1  4.000000   6000.000000  1995.000000  400000.000000\n",
      "2  3.976922   7000.000000  2010.000000  500000.000000\n",
      "3  3.000000   5149.427367  2005.000000  350000.000000\n",
      "4  5.000000  10000.000000  2015.000000  633049.977465\n",
      "5  4.000000   8000.000000  2000.000000  450000.000000\n",
      "6  3.410109   6000.000000  2005.000000  420000.000000\n",
      "7  3.000000   5403.967846  2010.000000  390000.000000\n",
      "8  4.000000   7000.000000  2005.879592  410000.000000\n",
      "9  5.000000   9000.000000  2015.000000  617973.115293\n"
     ]
    }
   ],
   "source": [
    "#Regression Imputation\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a realistic sample DataFrame with missing values\n",
    "data = {\n",
    "    'Rooms': [3, 4, np.nan, 3, 5, 4, np.nan, 3, 4, 5],\n",
    "    'LotSize': [5000, 6000, 7000, np.nan, 10000, 8000, 6000, np.nan, 7000, 9000],\n",
    "    'YearBuilt': [2000, 1995, 2010, 2005, 2015, 2000, 2005, 2010, np.nan, 2015],\n",
    "    'Price': [300000, 400000, 500000, 350000, np.nan, 450000, 420000, 390000, 410000, np.nan]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Original DataFrame with Missing Values:\")\n",
    "print(df)\n",
    "\n",
    "#Impute Missing Values in Rooms Using LotSize, YearBuilt, and Price\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Initialize SimpleImputer to fill initial missing values with the mean for regression\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "\n",
    "# Separate features and target for imputation of Rooms\n",
    "features_rooms = df[['LotSize', 'YearBuilt', 'Price']]\n",
    "target_rooms = df['Rooms']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_rooms_imputed = pd.DataFrame(imputer.fit_transform(features_rooms), columns=features_rooms.columns)\n",
    "\n",
    "# Data where Rooms is not missing\n",
    "not_missing_rooms = df[df['Rooms'].notna()]\n",
    "missing_rooms = df[df['Rooms'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict Rooms using LotSize, YearBuilt, and Price\n",
    "model_rooms = LinearRegression()\n",
    "model_rooms.fit(features_rooms_imputed.loc[not_missing_rooms.index], not_missing_rooms['Rooms'])\n",
    "\n",
    "# Predict missing values of Rooms\n",
    "predicted_rooms = model_rooms.predict(features_rooms_imputed.loc[missing_rooms.index])\n",
    "\n",
    "# Fill the missing values in Rooms\n",
    "df.loc[df['Rooms'].isna(), 'Rooms'] = predicted_rooms\n",
    "\n",
    "print(\"\\nDataFrame After Imputing Missing Rooms:\")\n",
    "print(df)\n",
    "\n",
    "#Impute Missing Values in LotSize Using Rooms, YearBuilt, and Price\n",
    "# Separate features and target for imputation of LotSize\n",
    "features_lotsize = df[['Rooms', 'YearBuilt', 'Price']]\n",
    "target_lotsize = df['LotSize']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_lotsize_imputed = pd.DataFrame(imputer.fit_transform(features_lotsize), columns=features_lotsize.columns)\n",
    "\n",
    "# Data where LotSize is not missing\n",
    "not_missing_lotsize = df[df['LotSize'].notna()]\n",
    "missing_lotsize = df[df['LotSize'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict LotSize using Rooms, YearBuilt, and Price\n",
    "model_lotsize = LinearRegression()\n",
    "model_lotsize.fit(features_lotsize_imputed.loc[not_missing_lotsize.index], not_missing_lotsize['LotSize'])\n",
    "\n",
    "# Predict missing values of LotSize\n",
    "predicted_lotsize = model_lotsize.predict(features_lotsize_imputed.loc[missing_lotsize.index])\n",
    "\n",
    "# Fill the missing values in LotSize\n",
    "df.loc[df['LotSize'].isna(), 'LotSize'] = predicted_lotsize\n",
    "\n",
    "print(\"\\nDataFrame After Imputing Missing LotSize:\")\n",
    "print(df)\n",
    "\n",
    "#Impute Missing Values in YearBuilt Using Rooms, LotSize, and Price\n",
    "# Separate features and target for imputation of YearBuilt\n",
    "features_yearbuilt = df[['Rooms', 'LotSize', 'Price']]\n",
    "target_yearbuilt = df['YearBuilt']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_yearbuilt_imputed = pd.DataFrame(imputer.fit_transform(features_yearbuilt), columns=features_yearbuilt.columns)\n",
    "\n",
    "# Data where YearBuilt is not missing\n",
    "not_missing_yearbuilt = df[df['YearBuilt'].notna()]\n",
    "missing_yearbuilt = df[df['YearBuilt'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict YearBuilt using Rooms, LotSize, and Price\n",
    "model_yearbuilt = LinearRegression()\n",
    "model_yearbuilt.fit(features_yearbuilt_imputed.loc[not_missing_yearbuilt.index], not_missing_yearbuilt['YearBuilt'])\n",
    "\n",
    "# Predict missing values of YearBuilt\n",
    "predicted_yearbuilt = model_yearbuilt.predict(features_yearbuilt_imputed.loc[missing_yearbuilt.index])\n",
    "\n",
    "# Fill the missing values in YearBuilt\n",
    "df.loc[df['YearBuilt'].isna(), 'YearBuilt'] = predicted_yearbuilt\n",
    "\n",
    "print(\"\\nDataFrame After Imputing Missing YearBuilt:\")\n",
    "print(df)\n",
    "\n",
    "#Impute Missing Values in Price Using Rooms, LotSize, and YearBuilt\n",
    "# Separate features and target for imputation of Price\n",
    "features_price = df[['Rooms', 'LotSize', 'YearBuilt']]\n",
    "target_price = df['Price']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_price_imputed = pd.DataFrame(imputer.fit_transform(features_price), columns=features_price.columns)\n",
    "\n",
    "# Data where Price is not missing\n",
    "not_missing_price = df[df['Price'].notna()]\n",
    "missing_price = df[df['Price'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict Price using Rooms, LotSize, and YearBuilt\n",
    "model_price = LinearRegression()\n",
    "model_price.fit(features_price_imputed.loc[not_missing_price.index], not_missing_price['Price'])\n",
    "\n",
    "# Predict missing values of Price\n",
    "predicted_price = model_price.predict(features_price_imputed.loc[missing_price.index])\n",
    "\n",
    "# Fill the missing values in Price\n",
    "df.loc[df['Price'].isna(), 'Price'] = predicted_price\n",
    "\n",
    "print(\"\\nDataFrame After Imputing Missing Price:\")\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45172263",
   "metadata": {
    "papermill": {
     "duration": 0.015171,
     "end_time": "2024-07-23T14:46:19.571766",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.556595",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Mean, Variance & Standard Deviation\n",
    "**Variance Definition**\n",
    "  * Variance measures the average squared deviation of each data point from the mean.\n",
    "  \n",
    "**Standard Deviation Definition**\n",
    "  * Standard deviation is the square root of the variance and provides a measure of the average distance from the mean.\n",
    "  \n",
    "***Significance of Knowing Variance and Standard Deviation for a Feature***\n",
    "1. **Understanding Spread**:\n",
    "\n",
    "  * Variance and standard deviation indicate how much the data points differ from the mean. A higher value means more spread, while a lower value means the data points are closer to the mean.\n",
    "  \n",
    "2. **Detecting Outliers**:\n",
    "\n",
    "  * High variance or standard deviation may indicate the presence of outliers. Outliers can significantly affect the mean and other statistical measures.\n",
    "  \n",
    "3. **Comparing Variability**:\n",
    "\n",
    "  * These metrics allow for the comparison of variability between different datasets or features. For instance, knowing the standard deviation of house prices in different regions can inform about market volatility.\n",
    "  \n",
    "4. **Data Consistency**:\n",
    "\n",
    "  * Low variance or standard deviation suggests that the data points are consistent, which can be desirable in many contexts (e.g., consistent manufacturing process).\n",
    "  \n",
    "5. **Model Assumptions**:\n",
    "\n",
    "  * Many statistical models assume a certain level of variance or standard deviation. Understanding these metrics helps in validating these assumptions.\n",
    "  \n",
    "  \n",
    "***Acceptability of Variance and Standard Deviation***\n",
    "1. **Context-Dependent**:\n",
    "\n",
    "  * In some fields, a high standard deviation might be expected and acceptable, while in others, it might indicate a problem.\n",
    "  * Example: In finance, high variance in stock prices indicates high risk, which might be acceptable for high-reward investments. In manufacturing, high variance in product dimensions might be unacceptable as it indicates inconsistent quality.\n",
    "  \n",
    "2. **Relative Comparison**:\n",
    "\n",
    "  * Compare the variance or standard deviation to historical data, industry standards, or other relevant benchmarks.\n",
    "  * Example: If the standard deviation of delivery times for a logistics company is significantly higher than industry benchmarks, it might indicate inefficiencies.\n",
    "  \n",
    "3. **Domain Knowledge**:\n",
    "\n",
    "  * Use domain knowledge to determine acceptable levels of variability.\n",
    "  * Example: In healthcare, acceptable variability in patient blood pressure readings might be very low, while variability in customer preferences for a retail business might be higher.\n",
    "  \n",
    "***Handling High Variance and Standard Deviation***\n",
    "1. **Data Transformation**:\n",
    "\n",
    "  * Apply transformations to stabilize variance and reduce skewness.\n",
    "  * Example: Log transformation, square root transformation, or Box-Cox transformation can reduce variability in right-skewed data.\n",
    "    \n",
    "    * import numpy as np\n",
    "    * df['Log_House_Price'] = np.log(df['House_Price'])\n",
    "    \n",
    "2. **Outlier Treatment**:\n",
    "  * Identify and handle outliers which can inflate variance.\n",
    "  * Example: Remove or transform outliers.\n",
    "    * df_no_outliers = df[df['House_Price'] < df['House_Price'].quantile(0.95)]\n",
    "    \n",
    "3. **Feature Engineering**:\n",
    "\n",
    "  * Create new features that capture important patterns and reduce variability.\n",
    "  * Example: Create an aggregate feature that combines multiple related features.\n",
    "    * df['Price_Per_Square_Foot'] = df['House_Price'] / df['House_Size']\n",
    "    \n",
    "4. **Normalization and Standardization**:\n",
    "\n",
    "  * Normalize or standardize your data to bring all features onto a similar scale.\n",
    "  * Example: Min-max normalization or z-score standardization.\n",
    "    * from sklearn.preprocessing import StandardScaler\n",
    "    * scaler = StandardScaler()\n",
    "    * df[['House_Price', 'House_Size']] = scaler.fit_transform(df[['House_Price', 'House_Size']])\n",
    "\n",
    "5. **Segmenting Data**:\n",
    "\n",
    "  * Segment your data into more homogeneous groups to reduce variability within each group.\n",
    "  * Example: Segmenting customer data by age group or region.\n",
    "    * df_grouped = df.groupby('Region')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b63e611",
   "metadata": {
    "papermill": {
     "duration": 0.015194,
     "end_time": "2024-07-23T14:46:19.602440",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.587246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Skewness and Kurtosis\n",
    "  * **Skewness Definition**:\n",
    "    * measures the asymmetry of a distribution. It indicates whether the data points are skewed to the left (negative skewness) or to the right (positive skewness).\n",
    "  * **Interpretation**:\n",
    "    * Negative Skewness (< 0): The left tail is longer; the bulk of the data points are to the right (he majority of the data points are concentrated on the right side).\n",
    "    * Positive Skewness (> 0): The right tail is longer; the bulk of the data points are to the left (The majority of the data points are concentrated on the left side).\n",
    "    * Zero Skewness (≈ 0): The distribution is symmetric.\n",
    "    \n",
    "* **Kurtosis Definition**:\n",
    "  *  measures the \"tailedness\" of the distribution. It indicates whether the data points have heavy or light tails compared to a normal distribution.\n",
    "  * **Interpretation**:\n",
    "    * Leptokurtic (Kurtosis > 0): Distribution has heavier tails and a sharper peak than a normal distribution ( indicating more data points in the tails and a higher peak).\n",
    "    * Platykurtic (Kurtosis < 0): Distribution has lighter tails and a flatter peak than a normal distribution (indicating fewer data points in the tails and a broader, flatter peak).\n",
    "    * Mesokurtic (Kurtosis ≈ 0): Distribution has tails and peak similar to a normal distribution.\n",
    "    \n",
    "    \n",
    "* **Example Output Interpretation**\n",
    "\n",
    "Skewness: 0.5765521555260447 and \n",
    "Kurtosis: -0.9263416062075296\n",
    "\n",
    "  * Skewness: 0.577 (Positive Skewness)\n",
    "\n",
    "    * The distribution is right-skewed, indicating that there are more data points on the lower end of house prices, with some higher values pulling the tail to the right.\n",
    "    \n",
    "  * Kurtosis: -0.926 (Platykurtic)\n",
    "\n",
    "    * The distribution has lighter tails and a flatter peak compared to a normal distribution, indicating less extreme values and a broader peak.\n",
    "\n",
    "* **Why Understanding Skewness and Kurtosis is Important**:\n",
    "  * **Model Assumptions**: Many statistical models assume normally distributed residuals. Understanding skewness and kurtosis helps validate these assumptions.\n",
    "  * **Data Transformation**: If the data is highly skewed or has extreme kurtosis, transformations (e.g., log transformation) might be necessary to meet model assumptions or improve performance.\n",
    "  * **Outlier Detection**: High kurtosis indicates potential outliers, which can be further investigated.\n",
    "  * **Descriptive Analysis**: Skewness and kurtosis provide a deeper understanding of the data's distribution, beyond just mean and standard deviation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eac6733f",
   "metadata": {
    "papermill": {
     "duration": 0.015071,
     "end_time": "2024-07-23T14:46:19.633005",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.617934",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Comparing Variance/Standard Deviation with Skewness\n",
    "**Variance and Standard Deviation**:\n",
    "  * Focus on Spread: They provide information about the dispersion or spread of the data around the mean.\n",
    "  * Use in Dispersion: Essential for understanding the overall variability and consistency of data points.\n",
    "  \n",
    "**Skewness**:\n",
    "  * Focus on Asymmetry: Provides information about the direction and degree of asymmetry in the data.\n",
    "  * Use in Shape: Crucial for understanding the shape of the distribution and identifying potential biases in data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a6aa082",
   "metadata": {
    "papermill": {
     "duration": 0.015074,
     "end_time": "2024-07-23T14:46:19.664014",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.648940",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Example Code for understanding "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b89d95b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:19.696918Z",
     "iopub.status.busy": "2024-07-23T14:46:19.696528Z",
     "iopub.status.idle": "2024-07-23T14:46:20.217572Z",
     "shell.execute_reply": "2024-07-23T14:46:20.216555Z"
    },
    "papermill": {
     "duration": 0.540201,
     "end_time": "2024-07-23T14:46:20.219860",
     "exception": false,
     "start_time": "2024-07-23T14:46:19.679659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean: 342250.0\n",
      "Standard Deviation: 88309.78666632953\n",
      "Variance: 7798618421.052631\n",
      "Skewness: 0.0009318739660160223\n",
      "Kurtosis: -2.0788965251549825\n",
      "The distribution is right-skewed.\n",
      "The distribution has lighter tails than a normal distribution (platykurtic).\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Sample DataFrame\n",
    "data = {\n",
    "    'House_Price': [250000, 270000, 260000, 280000, 240000, 230000, 255000, 265000, 250000, 275000,\n",
    "                    400000, 450000, 420000, 430000, 410000, 440000, 435000, 425000, 415000, 445000]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate statistics\n",
    "mean_price = df['House_Price'].mean()\n",
    "std_dev_price = df['House_Price'].std()\n",
    "variance_price = df['House_Price'].var()\n",
    "skewness_price = df['House_Price'].skew()\n",
    "kurtosis_price = df['House_Price'].kurtosis()\n",
    "\n",
    "# Print statistics\n",
    "print(f\"Mean: {mean_price}\")\n",
    "print(f\"Standard Deviation: {std_dev_price}\")\n",
    "print(f\"Variance: {variance_price}\")\n",
    "print(f\"Skewness: {skewness_price}\")\n",
    "print(f\"Kurtosis: {kurtosis_price}\")\n",
    "\n",
    "# Interpretation\n",
    "if skewness_price > 0:\n",
    "    print(\"The distribution is right-skewed.\")\n",
    "elif skewness_price < 0:\n",
    "    print(\"The distribution is left-skewed.\")\n",
    "else:\n",
    "    print(\"The distribution is symmetric.\")\n",
    "\n",
    "if kurtosis_price > 0:\n",
    "    print(\"The distribution has heavier tails than a normal distribution (leptokurtic).\")\n",
    "elif kurtosis_price < 0:\n",
    "    print(\"The distribution has lighter tails than a normal distribution (platykurtic).\")\n",
    "else:\n",
    "    print(\"The distribution has normal tails (mesokurtic).\")\n",
    "\n",
    "# Visualizing the distribution\n",
    "plt.figure(figsize=(10, 5))\n",
    "sns.histplot(df['House_Price'], bins=10, kde=True)\n",
    "plt.title('House Prices Distribution')\n",
    "plt.xlabel('House Price')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41244d59",
   "metadata": {
    "papermill": {
     "duration": 0.018118,
     "end_time": "2024-07-23T14:46:20.254384",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.236266",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Example Code to identify the Swewness and Kurtosis\n",
    "**Interpreting the Results**\n",
    "1. **Mean**: 342,250.0\n",
    "\n",
    "    * This is the average house price in your dataset.\n",
    "\n",
    "2. **Standard Deviation**: 88,309.79\n",
    "\n",
    "    * This indicates that house prices typically vary by approximately dollar 88,309 from the mean.\n",
    "    \n",
    "3. **Variance**: 7,798,618,421.05\n",
    "\n",
    "    * This is a measure of the dispersion of house prices around the mean.\n",
    "    \n",
    "4. **Skewness**: 0.00093\n",
    "\n",
    "    * The distribution is almost symmetric with a very slight right skew. Generally, a skewness close to 0 indicates a nearly symmetric distribution, so this is typically not a major concern.\n",
    "    \n",
    "5. **Kurtosis**: -2.0789\n",
    "\n",
    "    * The distribution is platykurtic, meaning it has lighter tails and a flatter peak compared to a normal distribution. This indicates fewer extreme values or outliers than a normal distribution.\n",
    "\n",
    "**Do You Need to Take Corrective Action?**\n",
    "1. **Skewness**\n",
    "  * **Slight Right Skew**: Since the skewness is very close to 0, indicating an almost symmetric distribution, there is typically no need for corrective action for skewness.\n",
    "  \n",
    "2. **Kurtosis**\n",
    "  * **Platykurtic Distribution**: This suggests fewer extreme values and a flatter peak. This can be beneficial as it indicates fewer outliers. However, if your specific analysis or model requires normally distributed data, you might consider transformations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbf12285",
   "metadata": {
    "papermill": {
     "duration": 0.016374,
     "end_time": "2024-07-23T14:46:20.287145",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.270771",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Methods to Identify Outliers\n",
    "1. Interquartile Range (IQR) Method\n",
    "2. Z-Score Method\n",
    "3. Modified Z-Score Method **--> Not a great method**\n",
    "4. Percentile Method\n",
    "5. Isolation Forest\n",
    "6. DBSCAN (Density-Based Spatial Clustering of Applications with Noise)  **--> Not a great method**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "721d8249",
   "metadata": {
    "papermill": {
     "duration": 0.01624,
     "end_time": "2024-07-23T14:46:20.319692",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.303452",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Interquartile Range (IQR) Method\n",
    "**Quartiles** divide a ranked dataset into four equal parts. Each quartile contains 25% of the data. Here's a breakdown of the key quartiles:\n",
    "\n",
    "  * First Quartile (Q1): This is the 25th percentile. It marks the point below which 25% of the data falls.\n",
    "  * Third Quartile (Q3): This is the 75th percentile. It marks the point below which 75% of the data falls.\n",
    "  * Interquartile Range (IQR): The IQR is the range between the first and third quartiles. It measures the spread of the middle 50% of the data.\n",
    "\n",
    "IQR=Q3−Q1\n",
    "Identifying Outliers Using the IQR Method.\n",
    "\n",
    "The IQR method defines outliers as data points that lie outside the range:\n",
    "[𝑄1−1.5×IQR,𝑄3+1.5×IQR]\n",
    "[Q1−1.5×IQR,Q3+1.5×IQR]\n",
    "\n",
    "  * Lower Bound: 𝑄1−1.5×IQR\n",
    "  * Upper Bound: 𝑄3+1.5×IQR\n",
    "\n",
    "**Use When**:\n",
    "\n",
    "  * The data distribution is approximately symmetric.\n",
    "  * You need a simple, easy-to-understand method.\n",
    "  * Your dataset is relatively small or moderately sized.\n",
    "  \n",
    "**Why**:\n",
    "\n",
    "  * IQR is robust to extreme values and does not assume a specific distribution.\n",
    "  * It is easy to implement and interpret.\n",
    "  \n",
    "**Limitations**:\n",
    "\n",
    "  * Not effective for datasets with multimodal distributions or clusters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "29773027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:20.354869Z",
     "iopub.status.busy": "2024-07-23T14:46:20.354082Z",
     "iopub.status.idle": "2024-07-23T14:46:20.373070Z",
     "shell.execute_reply": "2024-07-23T14:46:20.372030Z"
    },
    "papermill": {
     "duration": 0.03947,
     "end_time": "2024-07-23T14:46:20.375612",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.336142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First Quartile (Q1): 256250.0\n",
      "Third Quartile (Q3): 428750.0\n",
      "Interquartile Range (IQR): 172500.0\n",
      "lower_bound:  -2500.0\n",
      "upper_bound:  687500.0\n",
      "IQR:  172500.0\n",
      "outliers:      House_Price\n",
      "0    -100000000\n",
      "21     55500000\n",
      "Outliers identified by IQR method:\n",
      "    House_Price\n",
      "0    -100000000\n",
      "21     55500000\n",
      "Data without outliers:\n",
      "    House_Price\n",
      "1        250000\n",
      "2        270000\n",
      "3        260000\n",
      "4        280000\n",
      "5        240000\n",
      "6        230000\n",
      "7        255000\n",
      "8        265000\n",
      "9        250000\n",
      "10       275000\n",
      "11       400000\n",
      "12       450000\n",
      "13       420000\n",
      "14       430000\n",
      "15       410000\n",
      "16       440000\n",
      "17       435000\n",
      "18       425000\n",
      "19       415000\n",
      "20       445000\n"
     ]
    }
   ],
   "source": [
    "#Example Calculations\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Sample DataFrame\n",
    "np.random.seed(42)\n",
    "data = {\n",
    "    'House_Price': [-100000000,250000, 270000, 260000, 280000, 240000, 230000, 255000, 265000, 250000, 275000,\n",
    "                    400000, 450000, 420000, 430000, 410000, 440000, 435000, 425000, 415000, 445000,55500000]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate Q1, Q3, and IQR\n",
    "Q1 = df['House_Price'].quantile(0.25)\n",
    "Q3 = df['House_Price'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "print(f\"First Quartile (Q1): {Q1}\")\n",
    "print(f\"Third Quartile (Q3): {Q3}\")\n",
    "print(f\"Interquartile Range (IQR): {IQR}\")\n",
    "\n",
    "#Identify Outliers\n",
    "# Calculate bounds for outliers\n",
    "lower_bound = Q1 - (1.5 * IQR)\n",
    "\n",
    "upper_bound = Q3 + (1.5 * IQR)\n",
    "print (\"lower_bound: \",lower_bound)\n",
    "print (\"upper_bound: \",upper_bound)\n",
    "print (\"IQR: \",IQR)\n",
    "\n",
    "# Identify outliers\n",
    "outliers = df[(df['House_Price'] < lower_bound) | (df['House_Price'] > upper_bound)]\n",
    "print (\"outliers: \", outliers)\n",
    "\n",
    "print(\"Outliers identified by IQR method:\")\n",
    "print(outliers)\n",
    "# Remove outliers\n",
    "df_no_outliers = df[(df['House_Price'] >= lower_bound) & (df['House_Price'] <= upper_bound)]\n",
    "\n",
    "print(\"Data without outliers:\")\n",
    "print(df_no_outliers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ffddb30",
   "metadata": {
    "papermill": {
     "duration": 0.01657,
     "end_time": "2024-07-23T14:46:20.408865",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.392295",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Z-Score Method\n",
    "The **Z-score method** is a statistical technique used to identify outliers in a dataset. It measures how many standard deviations a data point is from the mean of the dataset. If the Z-score of a data point is very high or very low (typically greater than 3 or less than -3), it is considered an outlier.\n",
    "\n",
    "**Use When**:\n",
    "\n",
    "  * The data follows a normal distribution or is approximately symmetric.\n",
    "  * You have a large dataset.\n",
    "  * You want to identify outliers based on statistical properties.\n",
    "  \n",
    "**Why**:\n",
    "\n",
    "  * Z-score provides a standardized way to identify outliers based on the number of standard deviations from the mean.\n",
    "  \n",
    "**Limitations**:\n",
    "\n",
    "  * Sensitive to extreme values and assumes the data is normally distributed.\n",
    "  * Not suitable for datasets with skewed distributions or clusters.\n",
    "\n",
    "**Example Calculation**\n",
    "\n",
    "Let's use the sample dataset again to demonstrate the Z-score method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e8f90157",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:20.443201Z",
     "iopub.status.busy": "2024-07-23T14:46:20.442796Z",
     "iopub.status.idle": "2024-07-23T14:46:20.462383Z",
     "shell.execute_reply": "2024-07-23T14:46:20.460835Z"
    },
    "papermill": {
     "duration": 0.039554,
     "end_time": "2024-07-23T14:46:20.464694",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.425140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   House_Price\n",
      "0   -100000000\n",
      "1       250000\n",
      "2       270000\n",
      "3       260000\n",
      "4       280000\n",
      "With Z Score DF:\n",
      "   House_Price  Z_Score_House_Price\n",
      "0   -100000000            -1.029016\n",
      "1       250000            -0.174809\n",
      "2       270000            -0.174639\n",
      "3       260000            -0.174724\n",
      "4       280000            -0.174554\n",
      "Outliers identified by Z-score method:\n",
      "    House_Price  Z_Score_House_Price\n",
      "21    550000000             4.509483\n",
      "Data without outliers:\n",
      "    House_Price  Z_Score_House_Price\n",
      "0    -100000000            -1.029016\n",
      "1        250000            -0.174809\n",
      "2        270000            -0.174639\n",
      "3        260000            -0.174724\n",
      "4        280000            -0.174554\n",
      "5        240000            -0.174895\n",
      "6        230000            -0.174980\n",
      "7        255000            -0.174767\n",
      "8        265000            -0.174682\n",
      "9        250000            -0.174809\n",
      "10       275000            -0.174596\n",
      "11       400000            -0.173531\n",
      "12       450000            -0.173105\n",
      "13       420000            -0.173361\n",
      "14       430000            -0.173276\n",
      "15       410000            -0.173446\n",
      "16       440000            -0.173190\n",
      "17       435000            -0.173233\n",
      "18       425000            -0.173318\n",
      "19       415000            -0.173403\n",
      "20       445000            -0.173148\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.stats import zscore\n",
    "\n",
    "# Sample DataFrame\n",
    "np.random.seed(42)\n",
    "data = {\n",
    "    'House_Price': [-100000000, 250000, 270000, 260000, 280000, 240000, 230000, 255000, 265000, 250000, 275000,\n",
    "                    400000, 450000, 420000, 430000, 410000, 440000, 435000, 425000, 415000, 445000,550000000]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print (df.head())\n",
    "# Calculate Z-scores\n",
    "df['Z_Score_House_Price'] = zscore(df['House_Price'])\n",
    "print (\"With Z Score DF:\")\n",
    "print (df.head())\n",
    "# Define the threshold\n",
    "threshold = 3.5\n",
    "\n",
    "# Identify outliers\n",
    "outliers = df[(df['Z_Score_House_Price'].abs() > threshold)]\n",
    "\n",
    "print(\"Outliers identified by Z-score method:\")\n",
    "print(outliers)\n",
    "\n",
    "# Remove outliers\n",
    "df_no_outliers = df[(df['Z_Score_House_Price'].abs() <= threshold)]\n",
    "\n",
    "print(\"Data without outliers:\")\n",
    "print(df_no_outliers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a076eca0",
   "metadata": {
    "papermill": {
     "duration": 0.016349,
     "end_time": "2024-07-23T14:46:20.497501",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.481152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4. Percentile Method\n",
    "The Percentile Method is a non-parametric technique used to identify outliers based on specific percentiles of the data distribution. This method involves setting upper and lower bounds based on chosen percentiles, and any data points outside these bounds are considered outliers.\n",
    "\n",
    "**Key Concepts**\n",
    "  1. **Percentile**: A value below which a given percentage of observations in a dataset falls.\n",
    "  2. **Lower Percentile**: Typically set at the 1st or 5th percentile.\n",
    "  3. **Upper Percentile**: Typically set at the 99th or 95th percentile.\n",
    "  \n",
    "**Steps to Implement the Percentile Method**\n",
    "\n",
    "  1. Calculate the lower percentile (e.g., 1st or 5th percentile).\n",
    "  2. Calculate the upper percentile (e.g., 99th or 95th percentile).\n",
    "  3. Define outliers as data points below the lower percentile or above the upper percentile.\n",
    "  \n",
    "**Use When**:\n",
    "\n",
    "  * You need a simple method to identify outliers based on rank.\n",
    "  * The data distribution is not necessarily normal or symmetric.\n",
    "  \n",
    "**Why**:\n",
    "\n",
    "  * Percentile method is easy to understand and implement.\n",
    "  * It does not assume any specific data distribution.\n",
    "  \n",
    "**Limitations**:\n",
    "\n",
    "  * The choice of percentile thresholds can be arbitrary.\n",
    "  * May not effectively handle multimodal distributions or clusters.\n",
    "  \n",
    "**Example Calculation**\n",
    "\n",
    "Let’s demonstrate the Percentile Method using your sample dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d7aad3a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:20.533281Z",
     "iopub.status.busy": "2024-07-23T14:46:20.532922Z",
     "iopub.status.idle": "2024-07-23T14:46:20.548788Z",
     "shell.execute_reply": "2024-07-23T14:46:20.547539Z"
    },
    "papermill": {
     "duration": 0.037266,
     "end_time": "2024-07-23T14:46:20.551341",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.514075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1st Percentile: -78951700.0\n",
      "99th Percentile: 434594499.9999995\n",
      "Outliers identified by Percentile method:\n",
      "    House_Price\n",
      "0    -100000000\n",
      "21    550000000\n",
      "Data without outliers:\n",
      "    House_Price\n",
      "1        250000\n",
      "2        270000\n",
      "3        260000\n",
      "4        280000\n",
      "5        240000\n",
      "6        230000\n",
      "7        255000\n",
      "8        265000\n",
      "9        250000\n",
      "10       275000\n",
      "11       400000\n",
      "12       450000\n",
      "13       420000\n",
      "14       430000\n",
      "15       410000\n",
      "16       440000\n",
      "17       435000\n",
      "18       425000\n",
      "19       415000\n",
      "20       445000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Sample DataFrame\n",
    "data = {\n",
    "    'House_Price': [-100000000, 250000, 270000, 260000, 280000, 240000, 230000, 255000, 265000, 250000, 275000,\n",
    "                    400000, 450000, 420000, 430000, 410000, 440000, 435000, 425000, 415000, 445000, 550000000]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate lower and upper percentiles\n",
    "lower_percentile = df['House_Price'].quantile(0.01)  # 1st percentile\n",
    "upper_percentile = df['House_Price'].quantile(0.99)  # 99th percentile\n",
    "\n",
    "print(f\"1st Percentile: {lower_percentile}\")\n",
    "print(f\"99th Percentile: {upper_percentile}\")\n",
    "# Identify outliers\n",
    "outliers = df[(df['House_Price'] < lower_percentile) | (df['House_Price'] > upper_percentile)]\n",
    "\n",
    "print(\"Outliers identified by Percentile method:\")\n",
    "print(outliers)\n",
    "# Remove outliers\n",
    "df_no_outliers = df[(df['House_Price'] >= lower_percentile) & (df['House_Price'] <= upper_percentile)]\n",
    "\n",
    "print(\"Data without outliers:\")\n",
    "print(df_no_outliers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a9eb235",
   "metadata": {
    "papermill": {
     "duration": 0.018569,
     "end_time": "2024-07-23T14:46:20.587488",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.568919",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Isolation Forest\n",
    "**Isolation Forest** is an anomaly detection algorithm that isolates observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature. The idea is that anomalies are few and different, thus they are easier to isolate.\n",
    "\n",
    "**Key Concepts**\n",
    "  1. **Isolation**: Anomalies are isolated closer to the root of the tree as they require fewer splits to be isolated compared to normal observations.\n",
    "  2. **Path Length**: The number of edges an observation traverses in a tree before it is isolated.\n",
    "  3. **Anomaly Score**: Based on the path length. Observations with shorter paths are more likely to be anomalies.\n",
    "\n",
    "**Steps to Implement Isolation Forest**\n",
    "  1. **Train the Isolation Forest Model**: Fit the model on the dataset.\n",
    "  2. **Compute Anomaly Scores**: Calculate the anomaly score for each observation.\n",
    "  3. **Set a Contamination Level**: The proportion of the dataset expected to be anomalies.\n",
    "  4. **Identify Anomalies**: Based on the anomaly scores and the contamination level.\n",
    "  \n",
    "**Use When**:\n",
    "\n",
    "  * You have a large, high-dimensional dataset.\n",
    "  * The data may have complex relationships or clusters.\n",
    "  * You need an unsupervised method that does not assume a specific distribution.\n",
    "  \n",
    "**Why**:\n",
    "\n",
    "  * Isolation Forest is effective for high-dimensional data and can handle complex data structures.\n",
    "  * It works well for both continuous and categorical data.\n",
    "  \n",
    "**Limitations**:\n",
    "\n",
    "  * Requires parameter tuning (contamination level, number of estimators).\n",
    "  * Can be computationally expensive for very large datasets.Use When:\n",
    "\n",
    "Example Calculation\n",
    "Let's demonstrate the Isolation Forest method using your sample dataset:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6ff46450",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:20.623315Z",
     "iopub.status.busy": "2024-07-23T14:46:20.622940Z",
     "iopub.status.idle": "2024-07-23T14:46:21.020617Z",
     "shell.execute_reply": "2024-07-23T14:46:21.019658Z"
    },
    "papermill": {
     "duration": 0.41927,
     "end_time": "2024-07-23T14:46:21.024054",
     "exception": false,
     "start_time": "2024-07-23T14:46:20.604784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outliers identified by Isolation Forest method:\n",
      "    House_Price  Anomaly  Anomaly_Score\n",
      "0    -100000000       -1      -0.353614\n",
      "6        230000       -1      -0.003408\n",
      "21     55500000       -1      -0.318348\n",
      "Data without outliers:\n",
      "    House_Price  Anomaly  Anomaly_Score\n",
      "1        250000        1       0.097123\n",
      "2        270000        1       0.092183\n",
      "3        260000        1       0.107746\n",
      "4        280000        1       0.045427\n",
      "5        240000        1       0.059042\n",
      "7        255000        1       0.102129\n",
      "8        265000        1       0.103300\n",
      "9        250000        1       0.097123\n",
      "10       275000        1       0.080056\n",
      "11       400000        1       0.045359\n",
      "12       450000        1       0.030673\n",
      "13       420000        1       0.092977\n",
      "14       430000        1       0.094224\n",
      "15       410000        1       0.072277\n",
      "16       440000        1       0.080160\n",
      "17       435000        1       0.088281\n",
      "18       425000        1       0.094017\n",
      "19       415000        1       0.089057\n",
      "20       445000        1       0.068248\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but IsolationForest was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "#Example Calculations\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import IsolationForest\n",
    "\n",
    "# Sample DataFrame\n",
    "np.random.seed(42)\n",
    "data = {\n",
    "    'House_Price': [-100000000,250000, 270000, 260000, 280000, 240000, 230000, 255000, 265000, 250000, 275000,\n",
    "                    400000, 450000, 420000, 430000, 410000, 440000, 435000, 425000, 415000, 445000,55500000]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "# Fit the model\n",
    "iso = IsolationForest(contamination=0.1, random_state=42)\n",
    "df['Anomaly'] = iso.fit_predict(df[['House_Price']])\n",
    "df['Anomaly_Score'] = iso.decision_function(df[['House_Price']])\n",
    "\n",
    "# Identify anomalies\n",
    "outliers = df[df['Anomaly'] == -1]\n",
    "\n",
    "print(\"Outliers identified by Isolation Forest method:\")\n",
    "print(outliers)\n",
    "# Remove outliers\n",
    "df_no_outliers = df[df['Anomaly'] != -1]\n",
    "\n",
    "print(\"Data without outliers:\")\n",
    "print(df_no_outliers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d39bf4ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:21.060778Z",
     "iopub.status.busy": "2024-07-23T14:46:21.060315Z",
     "iopub.status.idle": "2024-07-23T14:46:21.145301Z",
     "shell.execute_reply": "2024-07-23T14:46:21.144239Z"
    },
    "papermill": {
     "duration": 0.1068,
     "end_time": "2024-07-23T14:46:21.147837",
     "exception": false,
     "start_time": "2024-07-23T14:46:21.041037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame with Missing Values:\n",
      "   Rooms  LotSize  YearBuilt     Price\n",
      "0    3.0   5000.0     2000.0  300000.0\n",
      "1    4.0   6000.0     1995.0  400000.0\n",
      "2    NaN   7000.0     2010.0  500000.0\n",
      "3    3.0      NaN     2005.0  350000.0\n",
      "4    5.0  10000.0     2015.0       NaN\n",
      "5    4.0   8000.0     2000.0  450000.0\n",
      "6    NaN   6000.0     2005.0  420000.0\n",
      "7    3.0      NaN     2010.0  390000.0\n",
      "8    4.0   7000.0        NaN  410000.0\n",
      "9    5.0   9000.0     2015.0       NaN\n",
      "\n",
      "DataFrame After Stochastic Regression Imputation for Rooms:\n",
      "      Rooms  LotSize  YearBuilt     Price\n",
      "0  3.000000   5000.0     2000.0  300000.0\n",
      "1  4.000000   6000.0     1995.0  400000.0\n",
      "2  4.222487   7000.0     2010.0  500000.0\n",
      "3  3.000000      NaN     2005.0  350000.0\n",
      "4  5.000000  10000.0     2015.0       NaN\n",
      "5  4.000000   8000.0     2000.0  450000.0\n",
      "6  3.341753   6000.0     2005.0  420000.0\n",
      "7  3.000000      NaN     2010.0  390000.0\n",
      "8  4.000000   7000.0        NaN  410000.0\n",
      "9  5.000000   9000.0     2015.0       NaN\n",
      "\n",
      "DataFrame After Stochastic Regression Imputation for LotSize:\n",
      "      Rooms       LotSize  YearBuilt     Price\n",
      "0  3.000000   5000.000000     2000.0  300000.0\n",
      "1  4.000000   6000.000000     1995.0  400000.0\n",
      "2  4.222487   7000.000000     2010.0  500000.0\n",
      "3  3.000000   5607.218714     2005.0  350000.0\n",
      "4  5.000000  10000.000000     2015.0       NaN\n",
      "5  4.000000   8000.000000     2000.0  450000.0\n",
      "6  3.341753   6000.000000     2005.0  420000.0\n",
      "7  3.000000   6300.999737     2010.0  390000.0\n",
      "8  4.000000   7000.000000        NaN  410000.0\n",
      "9  5.000000   9000.000000     2015.0       NaN\n",
      "\n",
      "DataFrame After Stochastic Regression Imputation for YearBuilt:\n",
      "      Rooms       LotSize    YearBuilt     Price\n",
      "0  3.000000   5000.000000  2000.000000  300000.0\n",
      "1  4.000000   6000.000000  1995.000000  400000.0\n",
      "2  4.222487   7000.000000  2010.000000  500000.0\n",
      "3  3.000000   5607.218714  2005.000000  350000.0\n",
      "4  5.000000  10000.000000  2015.000000       NaN\n",
      "5  4.000000   8000.000000  2000.000000  450000.0\n",
      "6  3.341753   6000.000000  2005.000000  420000.0\n",
      "7  3.000000   6300.999737  2010.000000  390000.0\n",
      "8  4.000000   7000.000000  2004.416576  410000.0\n",
      "9  5.000000   9000.000000  2015.000000       NaN\n",
      "\n",
      "DataFrame After Stochastic Regression Imputation for Price:\n",
      "      Rooms       LotSize    YearBuilt          Price\n",
      "0  3.000000   5000.000000  2000.000000  300000.000000\n",
      "1  4.000000   6000.000000  1995.000000  400000.000000\n",
      "2  4.222487   7000.000000  2010.000000  500000.000000\n",
      "3  3.000000   5607.218714  2005.000000  350000.000000\n",
      "4  5.000000  10000.000000  2015.000000  620803.857904\n",
      "5  4.000000   8000.000000  2000.000000  450000.000000\n",
      "6  3.341753   6000.000000  2005.000000  420000.000000\n",
      "7  3.000000   6300.999737  2010.000000  390000.000000\n",
      "8  4.000000   7000.000000  2004.416576  410000.000000\n",
      "9  5.000000   9000.000000  2015.000000  641307.903275\n"
     ]
    }
   ],
   "source": [
    "#Stochastic Regression Imputation:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Create a realistic sample DataFrame with missing values\n",
    "data = {\n",
    "    'Rooms': [3, 4, np.nan, 3, 5, 4, np.nan, 3, 4, 5],\n",
    "    'LotSize': [5000, 6000, 7000, np.nan, 10000, 8000, 6000, np.nan, 7000, 9000],\n",
    "    'YearBuilt': [2000, 1995, 2010, 2005, 2015, 2000, 2005, 2010, np.nan, 2015],\n",
    "    'Price': [300000, 400000, 500000, 350000, np.nan, 450000, 420000, 390000, 410000, np.nan]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "print(\"Original DataFrame with Missing Values:\")\n",
    "print(df)\n",
    "\n",
    "\n",
    "#Apply Stochastic Regression Imputation\n",
    "#We'll use linear regression to predict the missing values and then add a random error term to the predictions.\n",
    "#Impute Missing Values in Rooms Using LotSize, YearBuilt, and Price\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Initialize SimpleImputer to fill initial missing values with the mean for regression\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "\n",
    "# Separate features and target for imputation of Rooms\n",
    "features_rooms = df[['LotSize', 'YearBuilt', 'Price']]\n",
    "target_rooms = df['Rooms']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_rooms_imputed = pd.DataFrame(imputer.fit_transform(features_rooms), columns=features_rooms.columns)\n",
    "\n",
    "# Data where Rooms is not missing\n",
    "not_missing_rooms = df[df['Rooms'].notna()]\n",
    "missing_rooms = df[df['Rooms'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict Rooms using LotSize, YearBuilt, and Price\n",
    "model_rooms = LinearRegression()\n",
    "model_rooms.fit(features_rooms_imputed.loc[not_missing_rooms.index], not_missing_rooms['Rooms'])\n",
    "\n",
    "# Predict missing values of Rooms\n",
    "predicted_rooms = model_rooms.predict(features_rooms_imputed.loc[missing_rooms.index])\n",
    "\n",
    "# Calculate the residual standard deviation\n",
    "residuals_rooms = not_missing_rooms['Rooms'] - model_rooms.predict(features_rooms_imputed.loc[not_missing_rooms.index])\n",
    "std_dev_rooms = np.std(residuals_rooms)\n",
    "\n",
    "# Add random error term to predictions\n",
    "random_error_rooms = np.random.normal(0, std_dev_rooms, size=predicted_rooms.shape)\n",
    "stochastic_predicted_rooms = predicted_rooms + random_error_rooms\n",
    "\n",
    "# Fill the missing values in Rooms\n",
    "df.loc[df['Rooms'].isna(), 'Rooms'] = stochastic_predicted_rooms\n",
    "\n",
    "print(\"\\nDataFrame After Stochastic Regression Imputation for Rooms:\")\n",
    "print(df)\n",
    "\n",
    "#Impute Missing Values in LotSize Using Rooms, YearBuilt, and Price\n",
    "# Separate features and target for imputation of LotSize\n",
    "features_lotsize = df[['Rooms', 'YearBuilt', 'Price']]\n",
    "target_lotsize = df['LotSize']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_lotsize_imputed = pd.DataFrame(imputer.fit_transform(features_lotsize), columns=features_lotsize.columns)\n",
    "\n",
    "# Data where LotSize is not missing\n",
    "not_missing_lotsize = df[df['LotSize'].notna()]\n",
    "missing_lotsize = df[df['LotSize'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict LotSize using Rooms, YearBuilt, and Price\n",
    "model_lotsize = LinearRegression()\n",
    "model_lotsize.fit(features_lotsize_imputed.loc[not_missing_lotsize.index], not_missing_lotsize['LotSize'])\n",
    "\n",
    "# Predict missing values of LotSize\n",
    "predicted_lotsize = model_lotsize.predict(features_lotsize_imputed.loc[missing_lotsize.index])\n",
    "\n",
    "# Calculate the residual standard deviation\n",
    "residuals_lotsize = not_missing_lotsize['LotSize'] - model_lotsize.predict(features_lotsize_imputed.loc[not_missing_lotsize.index])\n",
    "std_dev_lotsize = np.std(residuals_lotsize)\n",
    "\n",
    "# Add random error term to predictions\n",
    "random_error_lotsize = np.random.normal(0, std_dev_lotsize, size=predicted_lotsize.shape)\n",
    "stochastic_predicted_lotsize = predicted_lotsize + random_error_lotsize\n",
    "\n",
    "# Fill the missing values in LotSize\n",
    "df.loc[df['LotSize'].isna(), 'LotSize'] = stochastic_predicted_lotsize\n",
    "\n",
    "print(\"\\nDataFrame After Stochastic Regression Imputation for LotSize:\")\n",
    "print(df)\n",
    "\n",
    "#Impute Missing Values in YearBuilt Using Rooms, LotSize, and Price\n",
    "\n",
    "# Separate features and target for imputation of YearBuilt\n",
    "features_yearbuilt = df[['Rooms', 'LotSize', 'Price']]\n",
    "target_yearbuilt = df['YearBuilt']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_yearbuilt_imputed = pd.DataFrame(imputer.fit_transform(features_yearbuilt), columns=features_yearbuilt.columns)\n",
    "\n",
    "# Data where YearBuilt is not missing\n",
    "not_missing_yearbuilt = df[df['YearBuilt'].notna()]\n",
    "missing_yearbuilt = df[df['YearBuilt'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict YearBuilt using Rooms, LotSize, and Price\n",
    "model_yearbuilt = LinearRegression()\n",
    "model_yearbuilt.fit(features_yearbuilt_imputed.loc[not_missing_yearbuilt.index], not_missing_yearbuilt['YearBuilt'])\n",
    "\n",
    "# Predict missing values of YearBuilt\n",
    "predicted_yearbuilt = model_yearbuilt.predict(features_yearbuilt_imputed.loc[missing_yearbuilt.index])\n",
    "\n",
    "# Calculate the residual standard deviation\n",
    "residuals_yearbuilt = not_missing_yearbuilt['YearBuilt'] - model_yearbuilt.predict(features_yearbuilt_imputed.loc[not_missing_yearbuilt.index])\n",
    "std_dev_yearbuilt = np.std(residuals_yearbuilt)\n",
    "\n",
    "# Add random error term to predictions\n",
    "random_error_yearbuilt = np.random.normal(0, std_dev_yearbuilt, size=predicted_yearbuilt.shape)\n",
    "stochastic_predicted_yearbuilt = predicted_yearbuilt + random_error_yearbuilt\n",
    "\n",
    "# Fill the missing values in YearBuilt\n",
    "df.loc[df['YearBuilt'].isna(), 'YearBuilt'] = stochastic_predicted_yearbuilt\n",
    "\n",
    "print(\"\\nDataFrame After Stochastic Regression Imputation for YearBuilt:\")\n",
    "print(df)\n",
    "\n",
    "#Impute Missing Values in Price Using Rooms, LotSize, and YearBuilt\n",
    "# Separate features and target for imputation of Price\n",
    "features_price = df[['Rooms', 'LotSize', 'YearBuilt']]\n",
    "target_price = df['Price']\n",
    "\n",
    "# Impute initial missing values for features\n",
    "features_price_imputed = pd.DataFrame(imputer.fit_transform(features_price), columns=features_price.columns)\n",
    "\n",
    "# Data where Price is not missing\n",
    "not_missing_price = df[df['Price'].notna()]\n",
    "missing_price = df[df['Price'].isna()]\n",
    "\n",
    "# Fit linear regression model to predict Price using Rooms, LotSize, and YearBuilt\n",
    "model_price = LinearRegression()\n",
    "model_price.fit(features_price_imputed.loc[not_missing_price.index], not_missing_price['Price'])\n",
    "\n",
    "# Predict missing values of Price\n",
    "predicted_price = model_price.predict(features_price_imputed.loc[missing_price.index])\n",
    "\n",
    "# Calculate the residual standard deviation\n",
    "residuals_price = not_missing_price['Price'] - model_price.predict(features_price_imputed.loc[not_missing_price.index])\n",
    "std_dev_price = np.std(residuals_price)\n",
    "\n",
    "# Add random error term to predictions\n",
    "random_error_price = np.random.normal(0, std_dev_price, size=predicted_price.shape)\n",
    "stochastic_predicted_price = predicted_price + random_error_price\n",
    "\n",
    "# Fill the missing values in Price\n",
    "df.loc[df['Price'].isna(), 'Price'] = stochastic_predicted_price\n",
    "\n",
    "print(\"\\nDataFrame After Stochastic Regression Imputation for Price:\")\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f768f3e7",
   "metadata": {
    "papermill": {
     "duration": 0.016782,
     "end_time": "2024-07-23T14:46:21.181837",
     "exception": false,
     "start_time": "2024-07-23T14:46:21.165055",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering\n",
    "\n",
    "## Identifying Features for Feature Engineering: \n",
    "To determine whether a feature needs feature engineering, consider the following:\n",
    "\n",
    "  * **Data Distribution**: Look for skewness, kurtosis, and outliers.\n",
    "  * **Correlation**: Assess the correlation between features and the target variable.\n",
    "  * **Domain Knowledge**: Use domain-specific insights to identify meaningful transformations.\n",
    "  * **Model Performance**: Evaluate the model's performance with the existing features."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63b27f4f",
   "metadata": {
    "papermill": {
     "duration": 0.023291,
     "end_time": "2024-07-23T14:46:21.222096",
     "exception": false,
     "start_time": "2024-07-23T14:46:21.198805",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Transformation Techniques in Machine Learning\n",
    "Transformations are used to make data more suitable for machine learning models. They can improve model performance, handle skewed data, and meet model assumptions. Here are some common transformation techniques and when to use each:\n",
    "\n",
    "1. **Log Transformation**\n",
    "   * **Purpose**: Reduces skewness and stabilizes variance.\n",
    "\n",
    "   * **When to Use**:\n",
    "     * **Highly Skewed Data**: When the data is highly positively skewed (skewness > 1.5).\n",
    "     * **Positive Data**: When the data contains only positive values.\n",
    "     * **Large Range of Values**: Suitable for data spanning several orders of magnitude.\n",
    "     * **Example**: Financial data, biological measurements with a wide range.\n",
    "\n",
    "\n",
    "2. **Square Root Transformation**\n",
    "   * **Purpose**: Reduces moderate skewness and stabilizes variance.\n",
    "\n",
    "   * **When to Use**:\n",
    "     * **Moderately Skewed Data**: When the data is moderately skewed (skewness between 0.5 and 1.5).\n",
    "     * **Non-Negative Data**: When the data contains non-negative values.\n",
    "     * **Example**: Count data, small range data.\n",
    "     \n",
    "     \n",
    "3. **Box-Cox Transformation**\n",
    "   * **Purpose**: Reduces skewness and stabilizes variance, flexible for various data shapes.\n",
    "\n",
    "   * **When to Use**:\n",
    "     * **Positive Data**: When the data contains strictly positive values.\n",
    "     * **Variety of Skewness Levels**: Suitable when you need to determine the best power transformation.\n",
    "     * **Example:** Transformations where a specific λ parameter is needed to normalize the data.\n",
    "     \n",
    "     \n",
    "4. **Min-Max Scaling**\n",
    "   * **Purpose**: Rescales data to a fixed range, usually [0, 1].\n",
    "\n",
    "   * **When to Use**:\n",
    "     * **Different Units**: When the features have different units or scales.\n",
    "     * **Range Normalization**: When you want to preserve relationships in data (proportional scaling).\n",
    "     * **Example:* mage pixel values, sensor data.\n",
    "     \n",
    "     \n",
    "5. **Standardization (Z-score Normalization)**\n",
    "Purpose: Centers data to have mean 0 and standard deviation 1.\n",
    "\n",
    "When to Use:\n",
    "\n",
    "Different Units: When the features have different units.\n",
    "Normally Distributed Data: Suitable for algorithms assuming normally distributed data (e.g., linear regression, SVM).\n",
    "Example: Height, weight measurements.\n",
    "\n",
    "6. **Robust Scaling**\n",
    "Purpose: Centers and scales data using robust statistics (median and IQR).\n",
    "\n",
    "When to Use:\n",
    "\n",
    "Presence of Outliers: When the data contains outliers that could distort other transformations.\n",
    "Example: Data with significant outliers, e.g., income data.\n",
    "\n",
    "\n",
    "7. **Power Transformation**\n",
    "\n",
    "Purpose: Makes data more Gaussian-like, can handle zero and negative values.\n",
    "\n",
    "When to Use:\n",
    "\n",
    "Skewed Data: Suitable for data that needs to be more normally distributed.\n",
    "Zero and Negative Values: Use Yeo-Johnson method if data contains zeros or negative values.\n",
    "Example: Transformations requiring normality, e.g., certain statistical tests and models.\n",
    "\n",
    "8. **Quantile Transformation**\n",
    "\n",
    "Purpose: Transforms data to follow a uniform or normal distribution.\n",
    "\n",
    "When to Use:\n",
    "\n",
    "Non-Gaussian Data: When the data needs to follow a specific distribution (uniform or normal).\n",
    "Example: Transforming features to follow a normal distribution for algorithms that assume normality.\n",
    "\n",
    "**Decision Guide**\n",
    "\n",
    "Check Skewness: Determine the level of skewness in your data.\n",
    "\n",
    "High skewness (> 1.5): Consider log transformation.\n",
    "Moderate skewness (0.5 to 1.5): Consider square root transformation.\n",
    "\n",
    "\n",
    "Check Data Values:\n",
    "Positive only: Log transformation, Box-Cox transformation.\n",
    "Non-negative: Square root transformation.\n",
    "Contains zeros or negatives: Yeo-Johnson power transformation.\n",
    "\n",
    "\n",
    "Presence of Outliers:\n",
    "Robust scaling is useful when outliers are present and could distort other transformations.\n",
    "\n",
    "\n",
    "Distribution Requirements:\n",
    "Normal distribution needed: Standardization, power transformation, quantile transformation.\n",
    "Fixed range needed: Min-Max scaling.\n",
    "\n",
    "\n",
    "Visual Inspection:\n",
    "Use histograms and Q-Q plots to visually inspect the impact of transformations.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6f063a3",
   "metadata": {
    "papermill": {
     "duration": 0.023433,
     "end_time": "2024-07-23T14:46:21.268115",
     "exception": false,
     "start_time": "2024-07-23T14:46:21.244682",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Log Transformation\n",
    "**Purpose**: Reduces skewness and handles heteroscedasticity (non-constant variance).\n",
    "\n",
    "**When to Use**:\n",
    "\n",
    "  * **Skewness**:\n",
    "    * Rule of Thumb: If the skewness of the data is greater than 1 (positively skewed), a log transformation can be beneficial.\n",
    "    * Mild Skewness: 0.5 to 1\n",
    "    * Moderate Skewness: 1 to 2\n",
    "    * High Skewness: Greater than 2\n",
    "    * Apply log transformation for moderate to high skewness.\n",
    "    \n",
    "  * **Kurtosis**:\n",
    "    * High Kurtosis: Greater than 3 (leptokurtic, heavy tails)\n",
    "    * Low Kurtosis: Less than 3 (platykurtic, light tails)\n",
    "    \n",
    "  * **Variance**:\n",
    "    * If the variance increases with the mean (heteroscedasticity), a log transformation can stabilize the variance.\n",
    "    * Plot residuals vs. fitted values to check for increasing variance.\n",
    "    \n",
    "**Decision Rule**\n",
    "  * Apply log transformation if skewness is high (> 1).\n",
    "  * Consider kurtosis:\n",
    "    * If kurtosis is also high (> 3), it indicates the presence of outliers, and a log transformation can help in reducing the impact of these outliers.\n",
    "    * If kurtosis is low (< 3), the data may already be relatively normal in the peak, and the need for transformation may depend more on skewness."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d65963e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:21.304338Z",
     "iopub.status.busy": "2024-07-23T14:46:21.303934Z",
     "iopub.status.idle": "2024-07-23T14:46:21.865448Z",
     "shell.execute_reply": "2024-07-23T14:46:21.864342Z"
    },
    "papermill": {
     "duration": 0.582334,
     "end_time": "2024-07-23T14:46:21.867921",
     "exception": false,
     "start_time": "2024-07-23T14:46:21.285587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Skewness: 2.40\n"
     ]
    },
    {
     "data": {
      "image/png": "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L730Upm+BwCAa2zZskVdunRRQECAxowZo0qVKmnWrFnq3r27vv32W3Xs2FGStH//fseXvbGxsapcubLefvvtMv2p2fbt29W/f3898MADGjp0qJo2bSpJmjFjhq688krdfPPN8vLy0ueff65hw4YpLy9Pw4cPd9pHcebpZ555RvHx8br//vvVoUMHZWZmau3atVq/fr2uv/56Pfnkk2ratKnefPNNPfvsswoLC9Nll10m6a+5cfDgwbrqqqsUHx+v9PR0vfLKK1q9erU2bNjgdMb+7NmzioqKUufOnfXyyy/Lz8/Pse67777TZ5995qg/Pj5eN910k8aMGaM33nhDw4YN09GjR/Xiiy/qvvvu0/Llyx3bLl++XL169VJ4eLji4uLk4eHh+JLju+++U4cOHSRJmzZtUs+ePVWrVi0988wzOnv2rOLi4hQUFFQmf1733nuvvv76ay1btkyXX365Y3zO99nhySefVEZGhtPPKPz9/SVJmZmZevvtt9W/f38NHTpUx48f1zvvvKOoqCj9+OOPatOmTZnUjoucAVDujh07ZiSZW2655Zz9br75ZiPJZGZmGmOMiYuLM5JM//79C/TNX5dv3bp1RpIZNWqUU79BgwYZSSYuLs7RNmfOHCPJ7N6929HWsGFDI8msXLnS0Xbw4EFjt9vNo48+6mg7deqUyc3NdTrG7t27jd1uN88++6xTmyQzZ86cc77nFStWGElmwYIFRfZp3bq1qVatmuP1iRMnCvRJTk42ksx7773naFuwYIGRZFasWFGgf2H7eOCBB4yfn585derUOWsGALhe/lz2008/Fdmnb9++xtvb2+zcudPR9scff5gqVaqYrl27Otr+/e9/G5vNZjZs2OBo+/PPP0316tULzJfn07t3b9OwYUOntvw5dsmSJQX6FzYfRUVFmUaNGhW6j/PN061btza9e/c+Z42Fjd3p06dN7dq1TYsWLczJkycd7V988YWRZMaNG+doi46ONpLM2LFjC+xbkrHb7U5jNmvWLCPJBAcHOz7jGGNMbGys0/jm5eWZJk2amKioKJOXl+fod+LECRMWFmauv/56R1vfvn2Nj4+P2bt3r6Nt69atxtPT0xQn4kRHR5vKlSsXuX7Dhg1GknnkkUec6vinwj47FPZ3wBhjzp49a3Jycpzajh49aoKCgsx999133poBY4zhEnqgAhw/flySVKVKlXP2y1+fmZnp1P7ggw+e9xhLliyRJA0bNsyp/d///nex62zevLnTFQK1atVS06ZNtWvXLkeb3W6Xh8df/3Tk5ubqzz//lL+/v5o2bar169cX+1gl4e/v7xhDSU6/GTxz5oz+/PNPNW7cWFWrVi12DX/fx/Hjx3X48GF16dJFJ06c0LZt28queACAS+Tm5urrr79W3759ne4tU6dOHd19991atWqVY75dsmSJIiIinM6AVq9e3XFZeFkICwtTVFRUgfa/z0cZGRk6fPiwunXrpl27dikjI8Opb3Hm6apVq2rLli367bffSlTf2rVrdfDgQQ0bNkw+Pj6O9t69e6tZs2aFXiH40EMPFbqv6667zunmsflXOtx+++1On4Xy2/PrT0lJ0W+//aa7775bf/75pw4fPqzDhw8rOztb1113nVauXKm8vDzl5uZq6dKl6tu3rxo0aODY3xVXXFHoGJdG/lnzoj5/lOazg6enp7y9vSVJeXl5OnLkiM6ePav27duX22coXHwI8EAFyJ+s/j4JFKaooB8WFnbeY+zdu1ceHh4F+jZu3LjYdf59EsxXrVo1HT161PE6Ly9PU6dOVZMmTWS321WzZk3VqlVLGzduLPBBo6xkZWU5jcnJkyc1btw4hYSEONVw7NixYtewZcsW3XrrrQoMDFRAQIBq1arluJFNeb0PAEDFOXTokE6cOOG4VP3vrrjiCuXl5Wnfvn2S/ppDC5svSzKHnk9Rc/nq1asVGRmpypUrq2rVqqpVq5aeeOIJSQXno+LM088++6yOHTumyy+/XC1bttTo0aO1cePG89a3d+9eSSp0vJo1a+ZYn8/Ly0v169cvdF//rDMwMFCSFBISUmh7fv35XzpER0erVq1aTsvbb7+tnJwcZWRk6NChQzp58qSaNGlS4NiF1V8aWVlZkpw/k5XFZ4d3331XrVq1ctyfoFatWlq8eDGfPVBs/AYeqACBgYGqU6fOeSfQjRs3ql69egUeWVJRd6kt6s705m+/u3/++ef19NNP67777tOECRNUvXp1eXh4aNSoURf0zNSinDlzRr/++qtatGjhaPv3v/+tOXPmaNSoUYqIiFBgYKBsNpvuuuuuYtVw7NgxdevWTQEBAXr22Wd12WWXycfHR+vXr9fjjz9eLu8DAHBpK2wu37lzp6677jo1a9ZMU6ZMUUhIiLy9vfXll19q6tSpBeaj4szTXbt21c6dO/Xpp5/q66+/1ttvv62pU6dq5syZuv/++8vs/fz9irx/KqrO89Wf/35feumlIn8P7u/vr5ycnBJWW3KbN2+W9L8vccris8MHH3ygQYMGqW/fvho9erRq164tT09PxcfHa+fOneX6fnDxIMADFeSmm27SW2+9pVWrVjnuJP933333nfbs2aMHHnigVPtv2LCh8vLytHv3bqdvpHfs2FHqmgvz8ccfq0ePHnrnnXec2o8dO6aaNWuW6bHyj3fy5EmnS+I+/vhjRUdHa/LkyY62U6dO6dixY07b/vMu/fmSkpL0559/auHCherataujfffu3WVbPADAZWrVqiU/Pz9t3769wLpt27bJw8PDcUa4YcOGhc6XZT2H/tPnn3+unJwcffbZZ05nrS/0ruTVq1fX4MGDNXjwYGVlZalr16565plnzhngGzZsKOmvm+1de+21Tuu2b9/uWF+e8m+mFxAQcM7n09eqVUu+vr6F/kygsD/v0nj//fdls9l0/fXXSyrZZ4eiPn98/PHHatSokRYuXOjUJy4urkxqxqWBS+iBCjJ69Gj5+vrqgQce0J9//um07siRI3rwwQfl5+en0aNHl2r/+QH3jTfecGp/7bXXSldwETw9PQvcCX/BggUFHjFTFn7++WeNGjVK1apVc7oTb2E1vPbaawUeAZf/PNp/Bvv8MwB/38fp06cLjB0AwLo8PT3Vs2dPffrpp06PKktPT9fcuXPVuXNnxxVvUVFRSk5OVkpKiqPfkSNH9OGHH5Z7jZLzfJSRkaE5c+aUep///Izh7++vxo0bn/esdfv27VW7dm3NnDnTqe9XX32lX375pURPtSmt8PBwXXbZZXr55Zcdl7D/3aFDhyT9NW5RUVFatGiRUlNTHet/+eUXLV269ILrmDRpkr7++mv169fPcVKkJJ8dKleuXOgl8YXt44cfflBycvIF14xLB2fggQrSpEkTvfvuuxowYIBatmypIUOGKCwsTHv27NE777yjw4cP6z//+Y/j2+eSCg8P1+23365p06bpzz//dDxGLv/5pUV9G1xSN910k5599lkNHjxYnTp10qZNm/Thhx863SCoNL777judOnXKcWO81atX67PPPlNgYKA++eQTBQcHO9Xw/vvvKzAwUM2bN1dycrK++eYb1ahRw2mfbdq0kaen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Vm5urr788ks9/fTTmjx5sp577rkijxMfH6/AwEDHEhIScsG1AwDgbkoV4Bs3bqwePXrogw8+0KlTp8q6JgAA4AZcNd/n5eWpdu3aevPNNxUeHq5+/frpySef1MyZM4vcJjY2VhkZGY5l3759FVYvAAAVpVQBfv369WrVqpViYmIUHBysBx544Lx3kwUAANZSFvN9zZo15enpqfT0dKf29PR0BQcHF7pNnTp1dPnll8vT09PRdsUVVygtLU2nT58udBu73a6AgACnBQCAi02pAnybNm30yiuv6I8//tDs2bN14MABde7cWS1atNCUKVN06NChsq4TAABUsLKY7729vRUeHq7ExERHW15enhITExUREVHoNtdcc4127NihvLw8R9uvv/6qOnXqyNvb+8LfGAAAFnVBN7Hz8vLSbbfdpgULFuiFF17Qjh079NhjjykkJEQDBw7UgQMHyqpOAADgIhc638fExOitt97Su+++q19++UUPPfSQsrOzHXelHzhwoGJjYx39H3roIR05ckQjR47Ur7/+qsWLF+v555/X8OHDy/V9AgDg7i4owK9du1bDhg1TnTp1NGXKFD322GPauXOnli1bpj/++EO33HJLWdUJAABc5ELn+379+unll1/WuHHj1KZNG6WkpGjJkiWOG9ulpqY6fQkQEhKipUuX6qefflKrVq308MMPa+TIkYU+cg4AgEtJqZ4DP2XKFM2ZM0fbt2/XjTfeqPfee0833nijPDz++j4gLCxMCQkJPLMVAAALK8v5fsSIERoxYkSh65KSkgq0RURE6Pvvv7+Q8gEAuOiUKsDPmDFD9913nwYNGqQ6deoU2qd27dp65513Lqg4AADgOsz3AAC4l1IF+N9+++28fby9vRUdHV2a3QMAADfAfA8AgHsp1W/g58yZowULFhRoX7Bggd59990LLgoAALge8z0AAO6lVAE+Pj5eNWvWLNBeu3ZtPf/88xdcFAAAcD3mewAA3EupAnxqaqrCwsIKtDds2FCpqakXXBQAAHA95nsAANxLqQJ87dq1tXHjxgLtP//8s2rUqHHBRQEAANdjvgcAwL2UKsD3799fDz/8sFasWKHc3Fzl5uZq+fLlGjlypO66666yrhEAALgA8z0AAO6lVHehnzBhgvbs2aPrrrtOXl5/7SIvL08DBw7kN3EAAFwkmO8BAHAvpQrw3t7e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mem0AABwsSHAAwCAcnP48GHl5uYqKCjIqT0oKEhpaWmFbrNq1Sq98847euutt4p9nPj4eAUGBjqWkJCQC6obAAB3RIAHAABu4/jx47r33nv11ltvqWbNmsXeLjY2VhkZGY5l37595VglAACu4eXqAgAAwMWrZs2a8vT0VHp6ulN7enq6goODC/TfuXOn9uzZoz59+jja8vLyJEleXl7avn27LrvssgLb2e122e32Mq4eAAD3whl4AABQbry9vRUeHq7ExERHW15enhITExUREVGgf7NmzbRp0yalpKQ4lptvvlk9evRQSkoKl8YDAC5pnIEHAADlKiYmRtHR0Wrfvr06dOigadOmKTs7W4MHD5YkDRw4UPXq1VN8fLx8fHzUokULp+2rVq0qSQXaAQC41BDgAQBAuerXr58OHTqkcePGKS0tTW3atNGSJUscN7ZLTU2VhwcXBQIAcD4EeAAAUO5GjBihESNGFLouKSnpnNsmJCSUfUEAAFiQS7/uXrlypfr06aO6devKZrNp0aJF5+yflJQkm81WYCnqMTQAAAAAAFwsXBrgs7Oz1bp1a02fPr1E223fvl0HDhxwLLVr1y6nCgEAAAAAcA8uvYS+V69e6tWrV4m3q127tuOGNgAAAAAAXAoseceYNm3aqE6dOrr++uu1evXqc/bNyclRZmam0wIAAAAAgNVYKsDXqVNHM2fO1H//+1/997//VUhIiLp3767169cXuU18fLwCAwMdC8+PBQAAAABYkaXuQt+0aVM1bdrU8bpTp07auXOnpk6dqvfff7/QbWJjYxUTE+N4nZmZSYgHAAAAAFiOpQJ8YTp06KBVq1YVud5ut8tut1dgRQAAAAAAlD1LXUJfmJSUFNWpU8fVZQAAAAAAUK5cegY+KytLO3bscLzevXu3UlJSVL16dTVo0ECxsbHav3+/3nvvPUnStGnTFBYWpiuvvFKnTp3S22+/reXLl+vrr7921VsAAAAAAKBCuDTAr127Vj169HC8zv+tenR0tBISEnTgwAGlpqY61p8+fVqPPvqo9u/fLz8/P7Vq1UrffPON0z4AAAAAALgYuTTAd+/eXcaYItcnJCQ4vR4zZozGjBlTzlUBAAAAAOB+LP8beAAAAAAALgUEeAAAAAAALIAADwAAAACABRDgAQAAAACwAAI8AAAAAAAWQIAHAAAAAMACCPAA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tWvXTtu3by8wYedbt26d8vLyNHnyZMdE+9FHHzn18fb2Vm5uboFta9WqpQMHDjhe//bbbzpx4sQ56wkKClLdunW1a9cuDRgwoKRvBwCAi84VV1yh//73vzLGOM7Cr169WlWqVFH9+vVVrVo1VapUST/99JMaNGggScrIyNCvv/6qrl27XtCxizMvr1mzRg0bNnQ6e793716nPoV9VqhVq5Yk6cCBA44z53+/oV1RmjdvLrvdrtTUVH7vjksaAR64BI0bN0433XSTGjRooDvuuEMeHh76+eeftXnzZj333HNq3Lixzpw5o9dee019+vTR6tWrNXPmTKd9hIaGKisrS4mJiWrdurX8/Pzk5+ena6+9Vq+//roiIiKUm5urxx9/XJUqVTpvTePHj9fDDz+swMBA3XDDDcrJydHatWt19OhRxcTElNdQAADgchkZGQVC7L/+9S9NmzZN//73vzVixAht375dcXFxiomJkYeHh6pUqaLo6GiNHj1a1atXV+3atRUXFycPDw+ny+5L63zzcpMmTZSamqp58+bpqquu0uLFi/XJJ5847SM0NFS7d+9WSkqK6tevrypVqsjX11dXX321Jk2apLCwMB08eFBPPfXUeeupUqWKHnvsMT3yyCPKy8tT586dlZGRodWrVysgIIAb3uLS4eLf4AMoR0XdGMcYY5YsWWI6depkfH19TUBAgOnQoYN58803HeunTJli6tSpY3x9fU1UVJR57733jCRz9OhRR58HH3zQ1KhRw0gycXFxxhhj9u/fb3r27GkqV65smjRpYr788stCb2L395vX5Pvwww9NmzZtjLe3t6lWrZrp2rWrWbhwYRmNBgAA7ic6OtpIKrAMGTLEJCUlmauuusp4e3ub4OBg8/jjj5szZ844ts3MzDR333238fPzM8HBwWbKlCmmQ4cOZuzYscU6drdu3c55w7vzzcujR482NWrUMP7+/qZfv35m6tSpTje4PXXqlLn99ttN1apVjSTHZ4GtW7eaiIgI4+vra9q0aWO+/vrrQm9i9/fPHMYYk5eXZ6ZNm2aaNm1qKlWqZGrVqmWioqLMt99+W6z3C1wMbMb848eqAAAAACwnOztb9erV0+TJkzVkyBBXlwOgHHAJPQAAAGBBGzZs0LZt29ShQwdlZGTo2WeflSTdcsstLq4MQHkhwAMAAAAW9fLLL2v79u3y9vZWeHi4vvvuO9WsWVPfffedevXqVeR2+Xd1B2AtXEIPAAAAXGROnjyp/fv3F7m+qCfRAHBvBHgAAAAAACzAw9UFAAAAAACA8yPAAwAAAABgAQR4AAAAAAAsgAAPAAAAAIAFEOABAAAAALAAAjwAAAAAABZAgAcAAAAAwAL+H4h/yqj5esa/AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Example - Log Transformation\n",
    "#Calculate Skewness:\n",
    "#Apply Log Transformation Based on Threshold:\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Example data\n",
    "data = {\n",
    "    'Feature': [1, 10, 100, 1000, 10000, 100000]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate skewness\n",
    "skewness = df['Feature'].skew()\n",
    "print(f\"Skewness: {skewness:.2f}\")\n",
    "\n",
    "# Plot original data\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['Feature'], bins=30)\n",
    "plt.title('Original Data')\n",
    "plt.xlabel('Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "# Apply log transformation if skewness > 1\n",
    "if skewness > 1:\n",
    "    df['Log_Feature'] = np.log1p(df['Feature'])\n",
    "    transformed = True\n",
    "else:\n",
    "    df['Log_Feature'] = df['Feature']\n",
    "    transformed = False\n",
    "\n",
    "# Plot transformed data\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.hist(df['Log_Feature'], bins=30)\n",
    "plt.title('Log Transformed Data' if transformed else 'Data without Transformation')\n",
    "plt.xlabel('Log_Feature' if transformed else 'Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "676b9358",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:21.905364Z",
     "iopub.status.busy": "2024-07-23T14:46:21.904958Z",
     "iopub.status.idle": "2024-07-23T14:46:22.354998Z",
     "shell.execute_reply": "2024-07-23T14:46:22.353958Z"
    },
    "papermill": {
     "duration": 0.471531,
     "end_time": "2024-07-23T14:46:22.357443",
     "exception": false,
     "start_time": "2024-07-23T14:46:21.885912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Skewness: 2.05\n",
      "Initial Kurtosis: 6.48\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import skew, kurtosis, boxcox, probplot\n",
    "\n",
    "# Generate example data with positive values and various degrees of skewness\n",
    "np.random.seed(0)\n",
    "data = np.random.exponential(scale=2, size=1000)  # Positively skewed data\n",
    "\n",
    "df = pd.DataFrame({'Feature': data})\n",
    "\n",
    "# Check for positive data\n",
    "if (df['Feature'] <= 0).any():\n",
    "    raise ValueError(\"Box-Cox transformation requires strictly positive values.\")\n",
    "\n",
    "# Calculate skewness and kurtosis\n",
    "initial_skewness = skew(df['Feature'])\n",
    "initial_kurtosis = kurtosis(df['Feature'])\n",
    "print(f\"Initial Skewness: {initial_skewness:.2f}\")\n",
    "print(f\"Initial Kurtosis: {initial_kurtosis:.2f}\")\n",
    "\n",
    "# Plot original data\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Original Data Histogram')\n",
    "plt.xlabel('Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "probplot(df['Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Original Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a552b3c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:22.396311Z",
     "iopub.status.busy": "2024-07-23T14:46:22.395947Z",
     "iopub.status.idle": "2024-07-23T14:46:22.855261Z",
     "shell.execute_reply": "2024-07-23T14:46:22.854172Z"
    },
    "papermill": {
     "duration": 0.48213,
     "end_time": "2024-07-23T14:46:22.858075",
     "exception": false,
     "start_time": "2024-07-23T14:46:22.375945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Lambda: 0.24\n",
      "Transformed Skewness: -0.03\n",
      "Transformed Kurtosis: -0.29\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply Box-Cox transformation\n",
    "df['BoxCox_Feature'], fitted_lambda = boxcox(df['Feature'])\n",
    "print(f\"Optimal Lambda: {fitted_lambda:.2f}\")\n",
    "\n",
    "# Recalculate skewness and kurtosis for transformed data\n",
    "transformed_skewness = skew(df['BoxCox_Feature'])\n",
    "transformed_kurtosis = kurtosis(df['BoxCox_Feature'])\n",
    "print(f\"Transformed Skewness: {transformed_skewness:.2f}\")\n",
    "print(f\"Transformed Kurtosis: {transformed_kurtosis:.2f}\")\n",
    "\n",
    "# Plot transformed data\n",
    "plt.figure(figsize=(14, 6))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['BoxCox_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Box-Cox Transformed Data Histogram')\n",
    "plt.xlabel('BoxCox_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "probplot(df['BoxCox_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Box-Cox Transformed Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9e91b01a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:22.899946Z",
     "iopub.status.busy": "2024-07-23T14:46:22.899224Z",
     "iopub.status.idle": "2024-07-23T14:46:24.310861Z",
     "shell.execute_reply": "2024-07-23T14:46:24.309795Z"
    },
    "papermill": {
     "duration": 1.436157,
     "end_time": "2024-07-23T14:46:24.314403",
     "exception": false,
     "start_time": "2024-07-23T14:46:22.878246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABH8AAAW/CAYAAAA1tF+CAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1yV5f/H8dcBAUEFN2jukXsULsy9cIQLR46caUNLxbJoaFqJI2dqajkyIydqNjR37tL0W5aamqmpoDlAUZnn98f98yQByjhwDvB+Ph7nIfd13/d1Piw5vLmGyWw2mxERERERERERkWzJwdYFiIiIiIiIiIhIxlH4IyIiIiIiIiKSjSn8ERERERERERHJxhT+iIiIiIiIiIhkYwp/RERERERERESyMYU/IiIiIiIiIiLZmMIfEREREREREZFsTOGPiIiIiIiIiEg2pvBHRERERERERCQbU/gjkk1t2rSJ2rVrkzt3bkwmEzdv3rR1SVbx7rvvYjKZbF2GXdi5cycmk4mdO3fauhQREZEcQa+vJLMtXboUk8nEX3/9ZetSJItT+CN26/5/dIcOHbJZDX/99RcmkylFD3v6D/natWv06NEDV1dX5s6dy+eff06ePHlsXVamGjBgQILPT968eSlXrhzdunVj7dq1xMfHp7nv4OBgZs6cab1i/1+zZs2oXr16kufufy1++OGH6X6eiRMnsn79+nT3IyIiWY9eX6WdXl9lzddXAGazmc8//5wmTZqQP39+3NzcqFGjBu+//z537tyxSX/3A7f7Dzc3N6pWrcrbb79NREREqmtKSkZ+TCXryWXrAkTsWZEiRfj8888TtE2bNo2///6bGTNmJLrWXvz000/cunWL9957j1atWtm6HJtxcXHh008/BeDu3bucO3eOjRs30q1bN5o1a8aGDRtwd3dPdb/BwcEcO3aMkSNHWrni1GnSpAl3797F2dk5VfdNnDiRbt260blz54wpTERE5CH0+ipry2qvr+Li4ujduzerVq2icePGvPvuu7i5ubF7927GjRvHqlWr2Lp1K0WLFrVJfx9//DF58+bl9u3bfP/993zwwQds376dvXv3pns0lr28ZhX7oPBH5CHy5MlD3759E7StWLGCGzduJGp/kNls5t69e7i6umZ0iUm6cuUKAPnz57dan5GRkVnur1u5cuVK9Hl6//33mTRp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u9X7fXPmzDFXrlzZ7OTkZPb09DS/+OKL5hs3biS4JrmPqeRMJrNZq2JKzjVy5EgWLFjA7du3k11MT0RSRt9PIiIC+nkg9i8mJgY/Pz+2bdvGxo0badu2rV31J5IRFP5IjnH37t0EO0Zcu3aNxx9/nCeffDLRom4i8nD6fhIREdDPA8m6IiMjadasGSdOnGDXrl08+eSTdtWfiLUp/JEco3bt2jRr1owqVaoQFhbGokWLuHTpEtu2bUuw+4CIPJq+n0REBPTzQEQkq9CCz5JjtG/fnjVr1rBw4UJMJhNPPvkkixYt0gsTkTTQ95OIiIB+HoiIZBUa+SMiIiIiIiIiko052LoAERERERERERHJOAp/RERERERERESysWy/5k98fDyXLl0iX758mEwmW5cjIiIiyTCbzdy6dYvixYvj4KC/T9mSXj+JiIhkDSl9/ZTtw59Lly5RsmRJW5chIiIiKXThwgVKlChh6zJyNL1+EhERyVoe9fop24c/+fLlA4wPhLu7u42rERERkeRERERQsmRJy89usR29fhIREckaUvr6KduHP/eHKru7u+vFi4iISBagaUa2p9dPIiIiWcujXj9pQr2IiIiIiIiISDam8EdERETETn388cfUrFnTMgLHx8eH77777qH3rF69msqVK5M7d25q1KjBt99+m0nVioiIiL1S+CMiIiJip0qUKMGkSZM4fPgwhw4dokWLFnTq1Inffvstyev37dtHr169GDx4MEeOHKFz58507tyZY8eOZXLlIiIiYk9MZrPZbOsiMlJERAQeHh6Eh4drzrqIiIgd08/slClYsCBTp05l8ODBic717NmTyMhIvv76a0tbgwYNqF27NvPnz0/xc+hzISIikjWk9Ge2Rv6IiIiIZAFxcXGsWLGCyMhIfHx8krxm//79tGrVKkGbr68v+/fvf2jfUVFRREREJHiIiIhI9qHwR0RERMSO/frrr+TNmxcXFxdeeOEF1q1bR9WqVZO8NjQ0FE9PzwRtnp6ehIaGPvQ5goKC8PDwsDxKlixptfpFRETE9hT+iIiIiNixSpUqcfToUQ4ePMiLL75I//79+f333636HIGBgYSHh1seFy5csGr/IiIiYlu5bF2AiIiIiCTP2dmZChUqAODt7c1PP/3ErFmzWLBgQaJrvby8CAsLS9AWFhaGl5fXQ5/DxcUFFxcX6xUtIiIidkUjf0RERESykPj4eKKiopI85+Pjw7Zt2xK0bdmyJdk1gkRERCRn0MgfERERETsVGBhIu3btKFWqFLdu3SI4OJidO3eyefNmAPr168djjz1GUFAQACNGjKBp06ZMmzaNDh06sGLFCg4dOsTChQtt+W6IiIiIjSn8EREREbFTV65coV+/fly+fBkPDw9q1qzJ5s2bad26NQDnz5/HweHfgdwNGzYkODiYt99+mzfffJOKFSuyfv16qlevbqt3QUREJEeLi4Pdu+HyZShWDBo3BkfHzK/DZDabzZn/tJknpXvei4iIiG3pZ7b90OdCREQk/UJCYMQI+Pvvf9tKlIBZs6BrV+s8R0p/Ztt0zZ8yZcpgMpkSPYYNGwbAvXv3GDZsGIUKFSJv3rz4+/snWsRQRERERERERMSehIRAt24Jgx+AixeN9pCQzK3HpuHPTz/9xOXLly2PLVu2ANC9e3cARo0axcaNG1m9ejW7du3i0qVLdLVWPCYiIiIiIiIiYmVxccaIn6TmWd1vGznSuC6z2HTNnyJFiiQ4njRpEuXLl6dp06aEh4ezaNEigoODadGiBQBLliyhSpUqHDhwgAYNGtiiZBERERERERGRZO3enXjEz4PMZrhwwbiuWbPMqclutnqPjo5m+fLlDBo0CJPJxOHDh4mJiaFVq1aWaypXrkypUqXYv39/sv1ERUURERGR4CEiIiIiIiIikhkuX7buddZgN7t9rV+/nps3bzJgwAAAQkNDcXZ2Jn/+/Amu8/T0JDQ0NNl+goKCGD9+fAZWKpnNzy/t927caL06RERERERERB6lWDHrXmcNdjPyZ9GiRbRr147ixYunq5/AwEDCw8MtjwsXLlipQhERERERERGRh2vc2NjVy2RK+rzJBCVLGtdlFrsIf86dO8fWrVt57rnnLG1eXl5ER0dz8+bNBNeGhYXh5eWVbF8uLi64u7sneIiIiIiIiIiIZAZHR2M7d0gcAN0/njnTuC6z2EX4s2TJEooWLUqHDh0sbd7e3jg5ObFt2zZL28mTJzl//jw+Pj62KFNERERERERE5JG6doU1a+CxxxK2lyhhtGf2RuY2X/MnPj6eJUuW0L9/f3Ll+rccDw8PBg8eTEBAAAULFsTd3Z2XX34ZHx8f7fQlIiIiIiIiInata1fo1MnY1evyZWONn8aNM3fEz302D3+2bt3K+fPnGTRoUKJzM2bMwMHBAX9/f6KiovD19WXevHk2qFJEREREREREJHUcHTNvO/eHsXn406ZNG8xmc5LncufOzdy5c5k7d24mVyUiIiIiIiIikj3YxZo/IiIiIiIiIiKSMRT+iIiIiIiIiIhkYwp/RERERERERESyMZuv+SMiIiIiIiIiYk/i4uxjly5r0cgfEREREREREZH/FxICZcpA8+bQu7fxb5kyRnua3btnperSRuGPiIiIiIiIiAhGwNOtG/z9d8L2ixeN9jQFQFu2QLlycPCgVWpMC4U/IiIiIiIiIpLjxcXBiBFgNic+d79t5EjjuhQxm2HKFGjb1pg/NmmStUpNNYU/IiIiIiIiIpLj7d6deMTPg8xmuHDBuO6Rbt+GZ56B11+H+HgYOBC+/NJqtaaWFnwWERERERERkRzv8mUrXXf6NHTpAseOgZMTzJoFL7wAJlO6a0wrhT8iIiIiIiIikiM8bBevYsVS1sdDr/v2W+jTB27eBC8vWLMGnnoqvWWnm6Z9iYiIiIiIiEi296hdvBo3hhIlkh+gYzJByZLGdYnEx8P778PTTxvBj48PHD5sF8EPKPwRERERERERkWwuJbt4OToaM7QgcQB0/3jmzH9HCllERIC/P7zzjrEw0PPPw44dULx4RrwraaLwR0RERERERESyrdTs4tW1qzFT67HHEl5XooTR3rXrfzo4cQLq14f168HZGT75BObPBxeXDHhP0k5r/oiIiIiIiIhItpWaXbyaNTMCnk6dkl8byGLDBnj2Wbh1y0iL1q41giA7pPBHRERERERERLKttOzi5ehoBEFJio+Hd9+F994zjhs3htWrwdMzHVVmLIU/IiIiIiIiIpJtWWUXr/tu3jR28/r2W+P4lVfgww+NLd3tmNb8EREREREREZFsK127eD3o2DGoW9cIfnLnhmXLjBWi7Tz4AYU/IiIiIiIiIpJNxMXBzp3w5ZfGv3Fx6djF60GrV0ODBnD6NJQqBXv3Guv9ZBEKf0REREREREQkywsJgTJloHlz6N3b+LdMGaM91bt43RcXB2+8AT16QGQktGwJhw/Dk09m8HtjXVrzR0RERERERESytJAQ6NYt8XbuFy8a7fcDnhTt4nXftWtGivT998bxq69CUBDkynpRStarWERERERERETk/8XFwYgRiYMfMNpMJhg50gh+HrqL14OO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yZQRdVlNREQEHh4ehIeH4+6e/HDDtPDzs2p3IjnSxo22rkBE7EVG/sy2tsjISL744gsCAwO5efMmcXFxti7JqrLS50JEbKNCBfj7zD3m8RKDWALAKroziMVEkveh93bsqK3cRawlpT+z0zTta8+ePezYsYPvvvuOatWq4eTklOC8RueIiIhIdvTDDz+wePFi1q5di4ODAz169GDw4MG2LktEJFOVLw/Rf15gN12pyyHicOANJvEhrwIPHxxQv76CHxFbSFP4kz9/frp06WLtWkRERETszqVLl1i6dClLly7l9OnTNGzYkNmzZ9OjRw/y5Mlj6/JERDLVK69AyT93sooeFOUq1yjIM6xgK60fea+jI+zdmwlFikgiaQp/lixZYu06REREROxOu3bt2Lp1K4ULF6Zfv34MGjSISpUq2bosERGbWLnCjMNHs9jKq+QijiPUpish/EXZFN2/apXW+RGxlTSFPwCxsbHs3LmTM2fO0Lt3b/Lly8elS5dwd3cnb96Hz/EUERERyQqcnJxYs2YNTz/9NI76jUVEcrAVi+8QO3goM/kCgOX0YSgLuYtbiu5fvRq6ds3ICkXkYdIU/pw7d462bdty/vx5oqKiaN26Nfny5WPy5MlERUUxf/58a9cpIiIikum++uorW5cgImJzHWv+xfhfu/AER4nFkdFMYzav8Kj1fe5bvhy6dcvYGkXk4dK01fuIESOoU6cON27cwNXV1dLepUsXtm3bZrXiRERERERExHZeqriFJb968wRHuUIRWrGV2YwgpcFP3brQp0/G1igij5am8Gf37t28/fbbODs7J2gvU6YMFy9etEphIiIiImLsMObn50fx4sUxmUysX7/+kffs3LmTJ598EhcXFypUqMDSpUszvE4RyV7iYs1MKjiFj063pRDX+Yk6eHOYXTRLcR8dO8KPP2ZcjSKScmkKf+Lj44mLi0vU/vfff5MvX750FyUiIiIihsjISGrVqsXcuXNTdP3Zs2fp0KEDzZs35+jRo4wcOZLnnnuOzZs3Z3ClIpJdbPjiNmucnuGNG6/jSDyLGUhjdvM3JVN0v5MT3LmjLd1F7Ema1vxp06YNM2fOZOHChQCYTCZu377NuHHjaN++vVULFBEREcnJ2rVrR7t27VJ8/fz58ylbtizTpk0DoEqVKuzZs4cZM2bg6+ubUWWKSDaxee5pyg3v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/ZuUSMmfOHh6elKxYkU2bdpEixYtAMuQt02bNtGzZ884r6latSqbNm2iT58+1rINGza4XCfkcex5Zo8ym80cPnyYRo0aJWGkqV/VqlVjbYOclt5rjnLgwAECAgKcHUayMQyD9957j++//54tW7ZQoECBp16T1n+u2fPMHqWfaxbR0dFERETEeS6tv8/EIkeOHOTIkcOua6OjowEe+x5LzRLyXC5dukTt2rWpWLEi8+fPx83NdQf4J+b9khY5op8uaYcj+j9pxZP6NymSc9ebTrmWLl1qeHl5GcHBwcaxY8eMbt26GZkzZzauXLliGIZhvPHGG8bgwYOt9bdv326kS5fOmDRpknH8+HFj+PDhhoeHh3H48GFnfQnJLqHPbOTIkca6deuMM2fOGHv37jVee+01w9vb2zh69KizvgSnuH37trF//35j//79BmBMnjzZ2L9/v/HPP/8YhmEYgwcPNt544w1r/b///ttInz69MXDgQOP48ePGZ599Zri7uxu//PKLs76EZJfQZzZlyhRj1apVxqlTp4zDhw8bvXv3Ntzc3IyNGzc660tIdu+8847h5+dnbNmyxQgJCbG+7t69a62jn2u27Hlm+rlm+fxt3brVOHv2rHHo0CFj8ODBhslkMtavX28Yht5nkji7du0yZsyYYezfv984d+6csWnTJqNatWpGoUKFjPv37zs7PKe5ePGiUbhwYaNOnTrGxYsXbX5mpXX//POPsX//fmPkyJFGxowZrf2H27dvOzu0ZPW0fnpa9bQ+ZVoUn/5PWvS0/k1qoOTPE8yYMcPImzev4enpaTz77LPGrl27rOdq1qxpdOzY0ab+t99+axQtWtTw9PQ0SpYsafz000/JHLHzJeSZ9enTx1rX39/faNSokbFv3z4nRO1cMduQP/qKeVYdO3Y0atasGeuacuXKGZ6enkbBggWN+fPnJ3vczpTQZzZhwgSjUKFChre3t5E1a1ajVq1axq+//uqc4J0krucF2Lx39HPNlj3PTD/XDKNLly5Gvnz5DE9PTyNHjhxGnTp1bDpGep9JYhw6dMioXbu2kTVrVsPLy8vInz+/8fbbbxsXL150dmhONX/+/Mf+zErrOnbsGOdz2bx5s7NDS3ZP6qenVU/rU6ZF8en/pEVP69+kBibDcMHV8UREREREREREBNBuXyIiIiIiIiIiLk3JHxERERER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48aNadGihc3aPWXLlmXy5MlMmDCBUqVKsXjxYsaNG5egOADeeustnnnmGSpVqkSOHDnYvn37U68pU6YMW7du5a+//qJGjRqUL1+eYcOGkTt3bsAyzW7lypW8+OKLFC9enNmzZ/PNN99QsmTJBMcnklqYjMROqBQReYo7d+6QJ08ePv30U7p27erscEREREQkgTp16sStW7dYtWqVs0MRETto2peIONz+/fs5ceIEzz77LKGhoYwaNQqA5s2bOzkyERERERGRtEfJHxFJEpMmTeLkyZN4enpSsWJFtm3bRvbs2dm2bRsvvfTSY6+L2T1LREREREREHEPTvkQkWd27d49Lly499vyTdmUQERERERGRhFPyR0RERERERETEhWm3LxERERERERERF6bkj4iIiIiIiIiIC1PyR0RERERERETEhSn5IyIiIiIiIiLiwpT8ERERERERERFxYUr+iIiIiIiIiIi4MCV/RERERERERERcmJI/IiIiIiIiIiIuTMkfEREREREREREXpuSPiIiIiIiIiIgLU/JHRERERERERMSFKfkjIiIiIiIiIuLClPwREREREREREXFhSv6IiIiIiIiIiLgwJX9EJMk9ePCAQYMGERQUhJubGy1atHB2SA6TP39+OnXq5OwwUoROnTqRP39+Z4chIiKSJqh/Jc5Qq1YtatWq5ewwxA5K/oiNw4cP07p1a/Lly4e3tzd58uShXr16zJgxw9mhJblatWphMpmsLx8fH8qUKcPUqVOJjo5O0nsvWbKEqVOnPrXeiBEjbGJ83Cul/UD+6quv+OSTT2jdujULFiygb9++zg4p2T38/UmXLh1Zs2alYsWK9O7dm2PHjtnd7t27dxkxYgRbtmxxXLDAuXPnMJlMTJo0Kc7zMe/Ff//9N1H3OXbsGCNGjODcuXOJakdEJCVT/0r9q6Sg/lXq61/F+O+//xg4cCDPPPMM3t7eZM2alQYNGvDTTz85rb38+fPbPM+cOXNSo0YNvv/+e7tielRSP1N5unTODkBSjh07dlC7dm3y5s3LW2+9Ra5cubhw4QK7du1i2rRpvPfee84OMckFBgYybtw4AP7991+WLFlC3759uX79OmPGjEmy+y5ZsoQjR47Qp0+fJ9Zr1aoVhQsXth6Hh4fzzjvv0LJlS1q1amUt9/f3T6pQ7fLrr7+SJ08epkyZ4uxQnKpe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r2HevHnxuj4p2nvSz4CHPfq+NgzDuHr1qtG5c2cje/bshqenp1G6dGnr+/lhj3umkjxMhqFVKMVxTCYTw4cPZ8SIEc4ORUTSsOjoaHLkyEGrVq2YO3eus8MREUkU9a9EXNvhw4epUaMGQUFB/P7770/d1S252xPXoDV/REQkVbt//36sufcLFy7kxo0b1KpVyzlBiYiIiMRT6dKlWb16NadOnaJFixZERkamqPbENWjNHxERSdV27dpF3759adOmDdmyZWPfvn3MmzePUqVK0aZNG2eHJyIiIvJUNWvW5P79+ym2PUn9lPwREZFULX/+/AQFBTF9+nRu3LhB1qxZ6dChA+PHj8fT09PZ4YmIiIiIOJ3W/BERERERERERcWFa80dERERERERExIUp+SMiIiIiIiIi4sJcfs2f6OhoLl++jK+vLyaTydnhiIiIyGMYhsHt27fJnTs3bm76/ZQzqf8kIiKSOsS3/+TyyZ/Lly8TFBTk7DBEREQkni5cuEBgYKCzw0jT1H8SERFJXZ7Wf3L55I+vry9geRCZMmVycjQiIiLyOGFhYQQFBVn/7RbnUf9JREQkdYhv/8nlkz8xQ5UzZcqkzouIiEgqoGlGzqf+k4iISOrytP6TJtSLiIiIiIiIiLgwJX9ERERERERERFyYkj8iIiIiIiIiIi5MyR8RERERERERERem5I+IiIiIiIiIiAtT8kdERERERERExIUp+SMiIiIiIiIi4sKU/BERERERERERcWFK/oiIiIiIiIiIuDAlf0REREREREREXFg6ZwcgIiIiIiIiIuKKzGbYtg1CQiAgAGrUAHf35I9DyR8REREREREREQdbuRJ694aLF/9XFhgI06ZBq1bJG4umfYmIiIiIiIiIONDKldC6tW3iB+DSJUv5ypXJG4+SPyIiIiIiIiIiDmI2W0b8GEbsczFlffpY6iUXJX9ERERERERERBxk27bYI34eZhhw4YKlXnJR8kdERERERERExEFCQhxbzxG04LMki6ZN7b92zZrUd18RERERERFJmwICHFvPETTyR0RERERERETEQWrUsOzqZTLFfd5kgqAgS73kouSPiIiIiIiIiIiDuLtbtnOH2AmgmOOpUy31kouSPyIiIiIiIiIiDtSqFaxYAXny2JYHBlrKW7VK3ni05o+IiIiIiIiIiIO1agXNm1t29QoJsazxU6NG8o74iaHkj4iIiIiIiIhIEnB3h1q1nB2Fpn2JiIiIuLTx48djMpno06ePs0MRERERJ1HyR0RERMRF/fnnn8yZM4cyZco4OxQRERFxIiV/RERERFxQeHg47dq1Y+7cuWTJksXZ4YiIiIgTKfkjIiIi4oJ69OhB48aNqVu37lPrRkREEBYWZvMSERER16EFn0VERERczNKlS9m3bx9//vlnvOqPGzeOkSNHJnFUIiIi4iwa+SMiIiLiQi5cuEDv3r1ZvHgx3t7e8bpmyJAhhIaGWl8XLlxI4ihFREQkOWnkj4iIiIgL2bt3L9euXaNChQrWMrPZzG+//cbMmTOJiIjA3d3d5hovLy+8vLySO1QRERFJJkr+iIiIiLiQOnXqcPjwYZuyzp07U6xYMd5///1YiR8RERFxfUr+iIiIiLgQX19fSpUqZVOWIUMGsmXLFqtcRERE0gat+SMiIiIiIiIi4sI08kdERETExW3ZssXZIYiIiIgTaeSPiIiIiIiIiIgLU/JHRERERERERMSFadqXiIiIiIiIiMhDzGbYtg1CQiAgAGrUgNS8YaaSPyIiIiIiIiIi/2/lSujdGy5e/F9ZYCBMmwatWjkvrsTQtC8RERERERERESyJn9atbRM/AJcuWcpXrnROXImlkT+S4jVt6uwIRERERERExNWZzZYRP4YR+5xhgMkEffpA8+apbwqYRv6IiIiIiIiISJq3bVvsET8PMwy4cMFSL7VR8kdERERERERE0ryQEMfWS0mU/BERERERERGRNC8gwLH1UhIlf0REREREREQkzatRw7Krl8kU93mTCYKCLPVSGyV/RERERERERCTNc3e3bOcOsRNAMcdTp6a+xZ5ByR8REREREREREQBatYIVKyBPHtvywEBLeatWzokrsbTVu4iIiIiIiIikCWazZbeukBDL2j01asQeydOqlWU796fVS02U/BERERERERERl7dyJfTubbude2CgZarXoyN63N2hVq1kDS9JadqXiIiIiIiIiLi0lSuhdWvbxA/ApUuW8pUrnRNXclHyR0RERERERERcltlsGfFjGLHPxZT16WOp56qU/BERERERERERl7VtW+wRPw8zDLhwwVLPVSn5IyIiIiIiIiIuKyTEsfVSIyV/RERERERERMRlBQQ4tl5qpOSPiIiIiIiIiLisGjUsu3qZTHGfN5kg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zOi2LxERERFJWsxmGDkSypWzBD+ZM1uGIk6fruBHREQkDjTyR0RERESSjnPnoG1b2LnTst2wIXz/Pfj42LUsERGR5Ewjf0RERETE/gwDgoIskzrv3GkZ4fPDD7BihYIfERGRl6SRPyIiIiJiXzduwHvvWYIegFdegTlzIFcu+9YlIiLiIDTyR0RERETs56efoFgxS/CTOjV8841lWXcFPyIiIvFGI39EREREJPHdvw8ffQTTplm2ixSBefOgZEm7liUiIuKINPJHRERERBLXvn2WkCci+OnTBw4cUPAjIiKSQBT+iIiIiEjiePwYBg2CKlXg1CnInh22boUxY8DNzd7ViYiIOCzd9iUiIiIiCe/aNahf3zLCB6B1a5g0CdKls2tZIiIiKYHCHxERERFJeBkzgpMTpE8PU6dCixb2rkhERCTFUPgjIiLRCgy0z/OuWWOf5xWRBJQqFSxcCC4ukC2bvasRERFJURT+iIiIiEji0PLtIiIidqEJn0VEREREREREHJjCHxERERERERERB6bwR0RERERERETEgSn8ERERERERERFxYAp/REREREREREQcmMIfEREREQfy1VdfUblyZdKkSUO6dOnsXY6IiIgkAQp/RERERBxIWFgYzZo144MPPrB3KSIiIpJEpLJ3ASIiIiISf4YOHQpAUFBQrM8JDQ0lNDTUuh0SEhLfZYmIiIgdaeSPiIiISAo3fPhwvL29rQ9/f397lyQiIiLxSOGPiIiISAo3YMAAgoODrY+LFy/auyQRERGJRwp/RERERJK4/v37YzKZYnz8888/cb6+q6sradOmtXmIiIiI49CcPyIikuQEBsb93DVr7PO89mKvj/dlnldeXN++fWnfvn2MbXLnzp04xYiIiEiykyzCn8mTJzNq1CiuXr1KiRIlmDhxIuXLl7d3WSIiIiKJwsfHBx8fH3uXISIiIslUkr/ta9GiRfTp04fBgwdz6NAhSpQoQZ06dbh+/bq9SxMRERFJci5cuMDhw4e5cOECZrOZw4cPc/jwYe7du2fv0kRERMROknz4M3bsWLp06UKHDh0oXLgw06ZNI02aNMycOdPepYmIiIgkOYMGDaJUqVIMHjyYe/fuUapUKUqVKsWBAwfsXZqIiIjYSZK+7SssLIyDBw8yYMAA6z4nJydq167Nnj17ojwnNDSU0NBQ63ZwcDAAISEh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uHnzpnXfkSNHDCcnJ6Nt27bWfRG/2Fu2bBnp2gEBAQZg7N6927pv48aNBmC4u7sb58+ft+6fPn16pF9Wr776qlGsWDGbjz08PNyoXLmykS9fPuu+Xr16GYCxb98+677r168b3t7e8dI5uX37tgEYb731lnVfVJ+r4cOHGyaTyebjimkI7bPXCAsLM4oWLWrUqlUrxnoNwxL+RPW9+PQjpvAn4mMaNWpUjM8T3W1fEa/5zp07rfvu3r1r5MqVy8iZM6e1kzlmzJhI3zsPHz40ChYsGGX4E1/fGxHDnw3DMP755x8DMJycnIy9e/da90d8LT4diImI2IP6V+pfqX9lYc/+VcT31vO+7tOmTWuULl06xjbxfb1nA+KLFy8aCxcuNDJmzGi4u7sbly5dMgwjcvgTFhZmZM6c2ShatKjx8OFD6/XWrl1rAMagQYOs+3TbV/Kn274kQUyePJnNmzezefNm5s2bR82aNencubPNkMV169bh7OxMjx49bM7t27cvhmHYrF4xZMgQihQpQrt27fjwww+pXr16pPOiEhISAoCXl1es6l63bh1ZsmShZcuW1n2pU6emR48e3Lt3jx07dlj3T5o0CW9vb5o2bcrAgQN55513aNiwYaye53lcXV3p0KFDpP3u7u7W/9+9e5f//vuPqlWr8uDBA/755x+btp6enrRp08a67eLiQvny5Tlz5ox1X7p06bh06RL79+9/ofquXLnC4cOHad++PRkyZLDuL168OK+99hrr1q2LdM77778f5bUKFy5MpUqVrNsVKlQALMNUc+TIEWl/RP23bt3i559/pnnz5tbX4r///uPmzZvUqVOHkydPWoerrlu3jooVK1K+fHnr9Xx8fGjduvULfdzRiVhV6+7du9Z9T3+u7t+/z3///UflypUxDCPK4dVRefoat2/fJjg4mKpVq3Lo0KFYne/m5mb9Pnz2EZvndnFxYfv27dy+fTtWz/e0devWUb58eesQdLC8Tu+++y7nzp3j2LFjAGzYsIFs2bLRoEEDm7q7dOkS5XXj63vj7bfftm4XKFCAdOnSUahQIevXGUT+mhMRsTf1r16O+lfqXz17jRfpX0XU8byvey8vL5uaE+t6ALVr18bHxwd/f3/efvttPD09WbFiBdmyZYuy/YEDB7h+/Toffvghbm5u1v316tWjYMGCUd6uL8mXVvuSBFG+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dPbs2Y369esbM2fOtFkKNcKxY8eM2rVrG56enkamTJmMLl26GEeOHIm0dPiTJ0+M7t27Gz4+PobJZLL5evjhhx+MfPnyGa6urkbBggWNWbNmWWt5nnbt2hkeHh7RHn/2NX52qff//vvP6Nq1q1GwYEHDw8PD8Pb2NipUqGAsXrzY5jpXr1416tWrZ3h5eRmAzbLvp0+fNpo2bWqkS5fOcHNzM8qXL2+sXbs2Ui1nzpwx6tWrZ7i7uxs+Pj5G3759jWXLlhmAzdLrCfm98SJfiyIiiU39K/Wv1L+ysHf/KsLq1auN2rVrG+nSpbPWX6RIEZvP8Yt42etF/IzYv39/jO2eXeo9wqJFi4xSpUoZrq6uRoYMGYzWrVtbl4ePENNrKsmDyTD01qiIiCQt48ePp3fv3ly6dCna5UlFREREkoLOnTvzww8/8P3339O5c+ckdz0RAIU/IiJiVw8fPrRZreTRo0eUKlUKs9nMiRMn7FiZiIiIyPOZzWYaNWrEhg0bWLVq1UvPzxTf1xMBhT8iImJnb7zxBjly5KBkyZIEBwczb948/vrrL+bPn0+rVq3sXZ6IiIiISLKnCZ9FRMSu6tSpw4wZM5g/fz5ms5nChQuzcOFCWrRoYe/SREREREQcgkb+iIiIiIiIiIg4MCd7FyAiIiIiIiIiIglH4Y+IiIiIiIiIiANz+Dl/wsPD+ffff/Hy8sJkMtm7HBEREYmGYRjcvXuXrFmz4uSk96fsSf0nERGR5CG2/SeHD3/+/fdf/P397V2GiIiIxNLFixfJnj27vctI0dR/EhERSV6e139y+PDHy8sLsLwQadOmtXM1IiIiEp2QkBD8/f2tv7vFftR/EhERSR5i239y+PAnYqhy2rRp1XkRERFJBnSbkf2p/yQiIpK8PK//pBvqRUREREREREQcmMIfEREREREREREHpvBHRERERERERMSBKfwREREREREREXFgCn9ERERERERERByYwh8REREREREREQem8EdERERERERExIEp/BERERERERERcWAKf0REREREREREHJjCHxERERERERERB6bwR0RERERERETEgSn8ERERERERERFxYAp/REREREREREQcmMIfEREREREREREHpvBHRERERERERCSh3LwJHTrArVt2KyGV3Z5ZRERERERERMSR/fUXNGgAZ87A7duwcqVdylD4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REQcTVgYvP8+9OhhCX7atoVt26zBj9kMX3wBzZtb/h+ftLrXi9HIHxEREREHFx4ebjOhs4iIyEv77z/LbV07dliG4YwcCX37WofkLF9uyYQuX46fp8ue3bISWL58ljl+qlbViJ8XofBHRERExIEMGDCAN954gxw5cnD37l0WLFjA9u3b2Rix6oqIiMjLOnrUMrHz2bPg5QU//gj16lkPL11qWd09PmTIAIsXQ40aCntehsIfEREREQdy/fp12rZty5UrV/D29qZ48eJs3LiR1157zd6liYiII1i9Glq3hnv3IHduWLMGnppTLr7m94mY0+f77+HVV1/+eimdwh8RERERB/LDDz/YuwQREXFEhmG5tWvAAMv/a9SwDPHJmNHaZPlyy/w+8SF7dstkzprTJ34o/BERERERERGR6D16ZJlwZ948y/YHH8CECZA6tbWJ2Qw9e774pZ2coHt3CAy0bF+/rjl9EoLCHxERERERERGJ2pUr8NZbsG+fJY359lv48EObJmYzdO4Mly69+OUXLoy/+YEkelrqXUREREREREQiO3gQypWzBD/p08PGjZGCn+XLwdcXgoJe7NLZs8OyZQp+EotG/oiIiIiIiIiIrcWLoX17ePgQCha0TOycNy9mM2zfbnkcO2YJf17U0KHw2We6rSsxKfwREREREREREYvwcBgyBL780rL9xhvw44+YPb356gsYNcqy0FdcODtbbvNq2jTeqpVYUvgjIiIiIiIiInD/PrRt+7/hPH37wogRLF3hTKdOEBLycpf/8UcFP/ai8EdEREREREQkpbtwARo0gCNHwMWF8KnT2RbQnoFVYc+el7/80KGa38eeFP6IiIiIiIiIpGDmnbsxN3gLlzvXCXbLzDflV/Bt98o8eBA/18+e3TLHj9iPVvsSERERERERSaH2dw3iSbWauNy5zmFKUOzRfr75Jf6CH5MJJkzQ5M72pvBHREREREREJKUxm9lR7iPKTemAK2EsozGv8CsXyRFvT5ExIyxdCo0bx9slJY4U/oiIiIiIiIikJMHBHMvXgOoHxgAwlEE0Ywn38YyXy5tMlgXDrl1T8JNUaM4fERERERERkRTAbIYDC0/h934DCt/7mwe4054gltA8Xp9n0SJN7pzUaOSPiIiIiIiIiINbuhSaZfyZfG3Kk+Pe31wiG1XZGa/Bj78/LFum4Ccp0sgf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1BzVcfMzOXDgAIcPH+bixYsZzrD+p+zGfl9//TUff/wx+/bt488//2T27NmkpqZaf/Ep4pQcuN6QiOSDiIgIA7A+/P39jbp16xqLFy+2nnPgwAGjadOmhre3t1G8eHGjT58+1oWOR48ebZQuXdq4ePGi9fwlS5YYnp6exr59+6xtZ86cMSIjI41y5coZnp6ext133220adPGWL9+vfWcP//802jTpo3h6+tr+Pv7G507d7YuKv3FF18Yvr6+xm+//WY9f+fOnYaHh4fxv//9L9v3mdkCiTft2rXLeOyxxww/Pz/D19fXqFGjhvHOO+9Yn583b55Rvnx5w8vLy2jQoIGxYsWKNAsJGoZhvPnmm0apUqUMk8lkREREGIZhGPHx8UbXrl2NgIAAIywszIiOjs5wweebizTebtWqVUbDhg2NokWLGgEBAUa9evWM6dOnZ/teRUREJGvZLfh8+wYOe/fuNQDj2LFj1rbsvqOzGtMYRubjkoSEBKN///7GXXfdZXh4eBhhYWFGjx49rItHX79+3ejYsaMRFBRkAMasWbMMw0g/ljh+/LjRsWNHIyAgwPDx8THq1Klj7Ny50zAMy2LITZs2NYoWLWqEhYUZkyZNMh599FFj4MCB1uuzW/A5JSXFGDhwoBEQEGAEBQUZUVFRRs+ePdMsvGzLGGjChAlG6dKljaJFixotW7Y0Zs+enebzz+jPaenSpcbt/5t6/vx56xgOMNavX5/tgs+GkfXYb/Pmzcajjz5qFCtWzChatKhRo0YNY+HChZl+HiLOwGQYd3hDpYiIiIiIiDi1Xr16cfnyZZYtW+boUkQkF3Tbl4iIiIiIiIiIE1P4IyKFgp+fX6aPzZs3O7o8ERERERGRAku3fYlIoXDkyJFMn7v77rvveEcwERERERERZ6XwR0RERERERETEiem2LxERERERERERJ6bwR0RERERERETEiSn8ERERERERERFxYgp/REREREREREScmMIfEREREREREREnpvBHRERERERERMSJKfwREREREREREXFi/wc0YGKa3uWJNQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1400x1800 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply log transformation\n",
    "df['Log_Feature'] = np.log1p(df['Feature'])\n",
    "\n",
    "# Apply square root transformation\n",
    "df['Sqrt_Feature'] = np.sqrt(df['Feature'])\n",
    "\n",
    "# Plot transformed data for comparison\n",
    "plt.figure(figsize=(14, 18))\n",
    "\n",
    "plt.subplot(3, 2, 1)\n",
    "plt.hist(df['Log_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Log Transformed Data Histogram')\n",
    "plt.xlabel('Log_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(3, 2, 2)\n",
    "probplot(df['Log_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Log Transformed Data Q-Q Plot')\n",
    "\n",
    "plt.subplot(3, 2, 3)\n",
    "plt.hist(df['Sqrt_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Square Root Transformed Data Histogram')\n",
    "plt.xlabel('Sqrt_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(3, 2, 4)\n",
    "probplot(df['Sqrt_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Square Root Transformed Data Q-Q Plot')\n",
    "\n",
    "plt.subplot(3, 2, 5)\n",
    "plt.hist(df['BoxCox_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Box-Cox Transformed Data Histogram')\n",
    "plt.xlabel('BoxCox_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(3, 2, 6)\n",
    "probplot(df['BoxCox_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Box-Cox Transformed Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a857e444",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:24.360542Z",
     "iopub.status.busy": "2024-07-23T14:46:24.359736Z",
     "iopub.status.idle": "2024-07-23T14:46:24.804232Z",
     "shell.execute_reply": "2024-07-23T14:46:24.803114Z"
    },
    "papermill": {
     "duration": 0.470571,
     "end_time": "2024-07-23T14:46:24.806919",
     "exception": false,
     "start_time": "2024-07-23T14:46:24.336348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "df['MinMax_Feature'] = scaler.fit_transform(df[['Feature']])\n",
    "\n",
    "# Plot Min-Max scaled data\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['MinMax_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Min-Max Scaled Data Histogram')\n",
    "plt.xlabel('MinMax_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "probplot(df['MinMax_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Min-Max Scaled Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "837a00dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:24.855393Z",
     "iopub.status.busy": "2024-07-23T14:46:24.854592Z",
     "iopub.status.idle": "2024-07-23T14:46:25.272997Z",
     "shell.execute_reply": "2024-07-23T14:46:25.271843Z"
    },
    "papermill": {
     "duration": 0.445221,
     "end_time": "2024-07-23T14:46:25.275383",
     "exception": false,
     "start_time": "2024-07-23T14:46:24.830162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "df['Standardized_Feature'] = scaler.fit_transform(df[['Feature']])\n",
    "\n",
    "# Plot standardized data\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['Standardized_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Standardized Data Histogram')\n",
    "plt.xlabel('Standardized_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "probplot(df['Standardized_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Standardized Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6ad4657a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:25.324043Z",
     "iopub.status.busy": "2024-07-23T14:46:25.323652Z",
     "iopub.status.idle": "2024-07-23T14:46:25.812957Z",
     "shell.execute_reply": "2024-07-23T14:46:25.811879Z"
    },
    "papermill": {
     "duration": 0.516607,
     "end_time": "2024-07-23T14:46:25.815212",
     "exception": false,
     "start_time": "2024-07-23T14:46:25.298605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import RobustScaler\n",
    "\n",
    "scaler = RobustScaler()\n",
    "df['Robust_Feature'] = scaler.fit_transform(df[['Feature']])\n",
    "\n",
    "# Plot robust scaled data\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['Robust_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Robust Scaled Data Histogram')\n",
    "plt.xlabel('Robust_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "probplot(df['Robust_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Robust Scaled Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e5bccda7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:25.869134Z",
     "iopub.status.busy": "2024-07-23T14:46:25.868734Z",
     "iopub.status.idle": "2024-07-23T14:46:26.308804Z",
     "shell.execute_reply": "2024-07-23T14:46:26.307735Z"
    },
    "papermill": {
     "duration": 0.46998,
     "end_time": "2024-07-23T14:46:26.311152",
     "exception": false,
     "start_time": "2024-07-23T14:46:25.841172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import PowerTransformer\n",
    "\n",
    "# Apply Yeo-Johnson transformation (handles zero and negative values)\n",
    "power_transformer = PowerTransformer(method='yeo-johnson')\n",
    "df['Power_Feature'] = power_transformer.fit_transform(df[['Feature']])\n",
    "\n",
    "# Plot power transformed data\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['Power_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Power Transformed Data Histogram')\n",
    "plt.xlabel('Power_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "probplot(df['Power_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Power Transformed Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "38d28a8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:26.364183Z",
     "iopub.status.busy": "2024-07-23T14:46:26.363782Z",
     "iopub.status.idle": "2024-07-23T14:46:26.841090Z",
     "shell.execute_reply": "2024-07-23T14:46:26.840072Z"
    },
    "papermill": {
     "duration": 0.506694,
     "end_time": "2024-07-23T14:46:26.843737",
     "exception": false,
     "start_time": "2024-07-23T14:46:26.337043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import QuantileTransformer\n",
    "\n",
    "# Apply quantile transformation with normal output distribution\n",
    "quantile_transformer = QuantileTransformer(output_distribution='normal')\n",
    "df['Quantile_Feature'] = quantile_transformer.fit_transform(df[['Feature']])\n",
    "\n",
    "# Plot quantile transformed data\n",
    "plt.figure(figsize=(14, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(df['Quantile_Feature'], bins=30, color='blue', alpha=0.7)\n",
    "plt.title('Quantile Transformed Data Histogram')\n",
    "plt.xlabel('Quantile_Feature')\n",
    "plt.ylabel('Frequency')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "probplot(df['Quantile_Feature'], dist=\"norm\", plot=plt)\n",
    "plt.title('Quantile Transformed Data Q-Q Plot')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a749c625",
   "metadata": {
    "papermill": {
     "duration": 0.026573,
     "end_time": "2024-07-23T14:46:26.897600",
     "exception": false,
     "start_time": "2024-07-23T14:46:26.871027",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Visualization Of Features and Its Importance \n",
    "Visualizing data is a crucial step in data analysis. It helps in understanding the underlying patterns, distributions, relationships, and anomalies within the data. Different types of plots serve different purposes. Here’s a guide on when to use various plots, why they are needed, and how they help in data analysis.\n",
    "\n",
    "**Summary of When and Why to Use Various Plots**\n",
    "  * **Histograms**: For understanding the distribution of a single variable.\n",
    "  * **Box Plots**: For summarizing distribution and detecting outliers.\n",
    "  * **Scatter Plots**: For examining relationships between two continuous variables.\n",
    "  * **Pair Plots**: For exploring pairwise relationships in the dataset.\n",
    "  * **Heatmaps**: For visualizing correlations and patterns in categorical data.\n",
    "  * **Violin Plots**: For detailed distribution comparison across categories.\n",
    "  * **Line Plots**: For analyzing trends over time.\n",
    "  \n",
    "**Visualizing data using these various plots helps to**\n",
    "\n",
    "  * **Understand Distribution**: Histograms and box plots reveal the shape and spread of data.\n",
    "  * **Identify Relationships**: Scatter plots and pair plots show how variables interact.\n",
    "  * **Detect Outliers**: Box plots and scatter plots can highlight unusual data points.\n",
    "  * **Compare Groups**: Box plots, violin plots, and heatmaps allow for comparing distributions across categories.\n",
    "  * **Analyze Trends**: Line plots are crucial for time series analysis.\n",
    "  \n",
    "**Skewness and Kurtosis**:\n",
    "While skewness and kurtosis provide numerical measures of the distribution's asymmetry and tailedness, visualizing the data with a histogram is still crucial."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67a1ce24",
   "metadata": {
    "papermill": {
     "duration": 0.027313,
     "end_time": "2024-07-23T14:46:26.951701",
     "exception": false,
     "start_time": "2024-07-23T14:46:26.924388",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Correlations & Covariance\n",
    "\n",
    "\n",
    "**Correlation**:  is a statistical measure that describes the extent to which two variables are linearly related. It provides insights into the direction and strength of the relationship between variables. The correlation coefficient ranges from -1 to 1, where:\n",
    "\n",
    "  * +1 indicates a perfect positive linear relationship.\n",
    "  * -1 indicates a perfect negative linear relationship.\n",
    "  * 0 indicates no linear relationship.\n",
    "\n",
    "**Importance of Correlation**\n",
    "  1. **Feature Selection**               : Identifying highly correlated features helps in selecting relevant features for predictive modeling.\n",
    "  2. **Multicollinearity Detection**     : In regression analysis, high correlation between independent variables (multicollinearity) can affect model stability and interpretation.\n",
    "  3. **Data Imputation**                 : Correlation helps in choosing suitable features for imputing missing values.\n",
    "  4. **Exploratory Data Analysis (EDA)** : Correlation analysis is a key step in EDA to understand relationships and patterns in the data.  \n",
    "  5. it's generally advisable to check correlations **after handling missing data**\n",
    "\n",
    "**Why Handle Missing Data First?**\n",
    "  1. **Accuracy**    : Missing data can distort correlation calculations. Including missing values can lead to biased or misleading results.\n",
    "  2. **Completeness**: Handling missing data ensures that the dataset used for correlation analysis is complete, providing more reliable insights.\n",
    "  3. **Consistency** : Different methods of handling missing data (e.g., imputation, deletion) can impact the resulting correlations. Ensuring a     consistent approach helps in making valid comparisons.\n",
    "\n",
    "***Types of Correlation Coefficients***:\n",
    "  1. **Pearson Correlation**       : Measures the linear relationship between two continuous variables. It is sensitive to outliers.\n",
    "  2. **Spearman Rank Correlation** : Measures the monotonic relationship between two variables using their ranks. It is less sensitive to outliers and suitable for ordinal data.\n",
    "  3. **Kendall Tau Correlation**   : Measures the strength of association between two variables and is less sensitive to outliers than Pearson.\n",
    "  \n",
    "  \n",
    "**Covariance**:  is a measure that indicates the extent to which two variables change together. It can be used to determine whether an increase in one variable corresponds to an increase (positive covariance) or decrease (negative covariance) in another variable. A zero covariance indicates no linear relationship between the variables.\n",
    "\n",
    "  1. **Positive Covariance**:  Indicates that as one variable increases, the other variable also increases.\n",
    "  2. **Negative Covariance**: : Indicates that as one variable increases, the other variable decreases.\n",
    "  3. **Zero Covariance**:   3. **Zero Covariance**:  Indicates that there is no linear relationship between the variables.Indicates no linear relationship.\n",
    "\n",
    "  \n",
    "**Summary**\n",
    "  * **Correlation**: Best for understanding linear relationships between continuous variables. Pearson, Spearman, and Kendall are common methods.\n",
    "  * **Covariance**: Indicates how much two variables change together but is scale-dependent.\n",
    "  * **Scenario Analysis**: Helps tailor the approach based on data type and relationship nature.\n",
    "  * **Visualization**: Aids in interpreting complex relationships.\n",
    "  \n",
    "  \n",
    "**Where and Why Correlation useful in Machine Learning**\n",
    "  1. **Exploratory Data Analysis (EDA)**\n",
    "    * When: At the initial stage of ML projects.\n",
    "    * Where: Any dataset where understanding the relationships between features is crucial.\n",
    "    * Why: Helps identify patterns, relationships, and dependencies between features, guiding further analysis and preprocessing steps.\n",
    "    \n",
    "    \n",
    "  2. **Feature Selection**\n",
    "    * When: Before training ML models.\n",
    "    * Where: In datasets with multiple features to select the most relevant ones.\n",
    "    * Why: Helps identify and select features that are strongly related to the target variable, improving model performance and interpretability.\n",
    "    \n",
    "    \n",
    "  3. **Detecting Multicollinearity**\n",
    "    * When: When building regression models or other models sensitive to correlated features.\n",
    "    * Where: In datasets where multiple features might be highly correlated.\n",
    "    * Why: Helps identify and address multicollinearity, which can affect model stability and coefficients in regression models.\n",
    "    \n",
    "    \n",
    "  4. **Data Imputation**\n",
    "    * When: During data preprocessing.\n",
    "    * Where: In datasets with missing values.\n",
    "    * Why: Correlation can guide imputation strategies by identifying related features to use for imputing missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6c8c1f54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:27.007851Z",
     "iopub.status.busy": "2024-07-23T14:46:27.007413Z",
     "iopub.status.idle": "2024-07-23T14:46:27.029987Z",
     "shell.execute_reply": "2024-07-23T14:46:27.028879Z"
    },
    "papermill": {
     "duration": 0.053842,
     "end_time": "2024-07-23T14:46:27.032644",
     "exception": false,
     "start_time": "2024-07-23T14:46:26.978802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation Matrix:\n",
      "          Feature1  Feature2\n",
      "Feature1    1.0000    0.7529\n",
      "Feature2    0.7529    1.0000\n",
      "\n",
      "Sample DataFrame:\n",
      "   Feature1  Feature2\n",
      "0  0.496714 -0.225926\n",
      "1 -0.138264 -0.181499\n",
      "2  0.647689  0.156261\n",
      "3  1.523030  0.368529\n",
      "4 -0.234153 -0.142047\n",
      "\n",
      "Spearman Correlation Matrix:\n",
      "             Exam_Rank  Study_Hours\n",
      "Exam_Rank          1.0         -1.0\n",
      "Study_Hours       -1.0          1.0\n",
      "\n",
      "Kendall Tau Correlation Matrix:\n",
      "           Ranking_A  Ranking_B\n",
      "Ranking_A        1.0        0.2\n",
      "Ranking_B        0.2        1.0\n"
     ]
    }
   ],
   "source": [
    "#Example, Pearson Correlation \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Set the random seed for reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "# Generate the first feature (100 samples)\n",
    "feature1 = np.random.normal(0, 1, 100)\n",
    "\n",
    "# Generate noise (100 samples)\n",
    "noise = np.random.normal(0, 1, 100)\n",
    "\n",
    "# Create the second feature with a 70% correlation to the first feature\n",
    "# Adjust the weight of the noise to control the correlation\n",
    "feature2 = 0.4 * feature1 + 0.3 * noise\n",
    "\n",
    "# Spearman Rank Correlation \n",
    "# Create a DataFrame\n",
    "df = pd.DataFrame({\n",
    "    'Feature1': feature1,\n",
    "    'Feature2': feature2\n",
    "})\n",
    "\n",
    "# Calculate the correlation matrix\n",
    "correlation_matrix = df.corr(method='pearson')\n",
    "\n",
    "print(\"Correlation Matrix:\")\n",
    "print(correlation_matrix)\n",
    "\n",
    "print(\"\\nSample DataFrame:\")\n",
    "print(df.head())\n",
    "\n",
    "# Simulated data for Spearman correlation\n",
    "data = {\n",
    "    'Exam_Rank': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
    "    'Study_Hours': [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate Spearman correlation\n",
    "spearman_corr = df.corr(method='spearman')\n",
    "print(\"\\nSpearman Correlation Matrix:\")\n",
    "print(spearman_corr)\n",
    "#Exam Rank and Study Hours: A Spearman correlation coefficient close to -1 indicates a strong negative monotonic relationship, \n",
    "#meaning as study hours increase, exam rank decreases (or vice versa).\n",
    "\n",
    "#Kendall Tau Correlation\n",
    "# Simulated data for Kendall Tau correlation\n",
    "data = {\n",
    "    'Ranking_A': [1, 2, 3, 4, 5],\n",
    "    'Ranking_B': [3, 2, 1, 5, 4]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate Kendall Tau correlation\n",
    "kendall_tau_corr = df.corr(method='kendall')\n",
    "print(\"\\nKendall Tau Correlation Matrix:\")\n",
    "print(kendall_tau_corr)\n",
    "#Ranking_A and Ranking_B: A Kendall Tau correlation coefficient close to -1 indicates a strong negative association between the two rankings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f482de0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:27.087510Z",
     "iopub.status.busy": "2024-07-23T14:46:27.087098Z",
     "iopub.status.idle": "2024-07-23T14:46:27.101581Z",
     "shell.execute_reply": "2024-07-23T14:46:27.100406Z"
    },
    "papermill": {
     "duration": 0.044707,
     "end_time": "2024-07-23T14:46:27.103936",
     "exception": false,
     "start_time": "2024-07-23T14:46:27.059229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Temperature  IceCreamSales\n",
      "0    32.483571     101.626868\n",
      "1    29.308678     108.821808\n",
      "2    33.238443     126.099480\n",
      "3    37.615149     134.415052\n",
      "4    28.829233     112.091218\n",
      "5    28.829315     123.398278\n",
      "6    37.896064     189.307974\n",
      "7    33.837174     138.840251\n",
      "8    27.652628     115.761520\n",
      "9    32.712800     129.362283\n",
      "Correlation Matrix:\n",
      "               Temperature  IceCreamSales\n",
      "Temperature       1.000000       0.635724\n",
      "IceCreamSales     0.635724       1.000000\n",
      "Covariance Matrix (Positive Covariance):\n",
      "               Temperature  IceCreamSales\n",
      "Temperature      20.619247      70.661570\n",
      "IceCreamSales    70.661570     599.178402\n",
      "\n",
      "Temperature and Ice Cream Sales: A positive covariance indicates that higher temperatures are associated with higher ice cream sales.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Covariance\n",
    "#Example 1: Positive Covariance\n",
    "#Scenario: The relationship between temperature and ice cream sales.\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Set random seed for reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "# Simulated data for temperature and ice cream sales\n",
    "temperature = np.random.normal(30, 5, 100)  # Temperature in degrees Celsius\n",
    "ice_cream_sales = temperature * 4 + np.random.normal(0, 20, 100)  # Ice cream sales related to temperature\n",
    "\n",
    "# Create DataFrame\n",
    "data = {\n",
    "    'Temperature': temperature,\n",
    "    'IceCreamSales': ice_cream_sales\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print (df.head(10))\n",
    "# Calculate correlation matrix\n",
    "correlation_matrix = df.corr(method='pearson')\n",
    "print(\"Correlation Matrix:\")\n",
    "print(correlation_matrix)\n",
    "\n",
    "# Calculate covariance matrix\n",
    "covariance_matrix = df.cov()\n",
    "print(\"Covariance Matrix (Positive Covariance):\")\n",
    "print(covariance_matrix)\n",
    "print (\"\\nTemperature and Ice Cream Sales: A positive covariance indicates that higher temperatures are associated with higher ice cream sales.\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0b9a86a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:27.160421Z",
     "iopub.status.busy": "2024-07-23T14:46:27.159416Z",
     "iopub.status.idle": "2024-07-23T14:46:27.174595Z",
     "shell.execute_reply": "2024-07-23T14:46:27.173502Z"
    },
    "papermill": {
     "duration": 0.046222,
     "end_time": "2024-07-23T14:46:27.177016",
     "exception": false,
     "start_time": "2024-07-23T14:46:27.130794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   TV_Hours  PhysicalActivity\n",
      "0  4.764052         61.775230\n",
      "1  3.400157         59.259633\n",
      "2  3.978738         53.860195\n",
      "3  5.240893         52.438052\n",
      "4  4.867558         45.458803\n",
      "5  2.022722         89.490885\n",
      "6  3.950088         58.431021\n",
      "7  2.848643         67.776298\n",
      "8  2.896781         80.646899\n",
      "9  3.410599         73.296589\n",
      "Correlation Matrix:\n",
      "                  TV_Hours  PhysicalActivity\n",
      "TV_Hours          1.000000         -0.879498\n",
      "PhysicalActivity -0.879498          1.000000\n",
      "\n",
      "Covariance Matrix (Negative Covariance):\n",
      "                  TV_Hours  PhysicalActivity\n",
      "TV_Hours          1.026087         -9.672422\n",
      "PhysicalActivity -9.672422        117.873419\n",
      "\n",
      "\n",
      "TV Hours and Physical Activity: A negative covariance indicates that more hours spent watching TV are associated with less physical activity.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Coveriance\n",
    "#Example 2: Negative Covariance\n",
    "#Scenario: The relationship between the number of hours spent watching TV and physical activity.\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Set random seed for reproducibility\n",
    "np.random.seed(0)\n",
    "\n",
    "# Simulated data for TV hours and physical activity\n",
    "tv_hours = np.random.normal(3, 1, 100)  # TV hours per day\n",
    "physical_activity = 100 - tv_hours * 10 + np.random.normal(0, 5, 100)  # Negative relationship with TV hours\n",
    "\n",
    "# Create DataFrame\n",
    "data = {\n",
    "    'TV_Hours': tv_hours,\n",
    "    'PhysicalActivity': physical_activity\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print (df.head(10))\n",
    "# Calculate correlation matrix\n",
    "correlation_matrix = df.corr(method='pearson')\n",
    "print(\"Correlation Matrix:\")\n",
    "print(correlation_matrix)\n",
    "\n",
    "# Calculate covariance matrix\n",
    "covariance_matrix = df.cov()\n",
    "print(\"\\nCovariance Matrix (Negative Covariance):\")\n",
    "print(covariance_matrix)\n",
    "print (\"\\n\\nTV Hours and Physical Activity: A negative covariance indicates that more hours spent watching TV are associated with less physical activity.\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8a2a4140",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-23T14:46:27.233362Z",
     "iopub.status.busy": "2024-07-23T14:46:27.232972Z",
     "iopub.status.idle": "2024-07-23T14:46:27.243430Z",
     "shell.execute_reply": "2024-07-23T14:46:27.242145Z"
    },
    "papermill": {
     "duration": 0.042328,
     "end_time": "2024-07-23T14:46:27.246375",
     "exception": false,
     "start_time": "2024-07-23T14:46:27.204047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Covariance Matrix (Zero Covariance):\n",
      "               BooksRead  MoviesWatched\n",
      "BooksRead       7.960707       0.022121\n",
      "MoviesWatched   0.022121       8.752626\n",
      "\n",
      "\n",
      "Books Read and Movies Watched: A covariance close to zero indicates no linear relationship between the number of books read and the number of movies watched. \n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Covariance\n",
    "#Example 3: Zero Covariance\n",
    "#Scenario: The relationship between the number of books read and the number of movies watched.\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "np.random.seed(0)\n",
    "data = {\n",
    "    'BooksRead': np.random.randint(0, 10, 100),  # Number of books read per month\n",
    "    'MoviesWatched': np.random.randint(0, 10, 100)  # Number of movies watched per month\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate covariance matrix\n",
    "covariance_matrix = df.cov()\n",
    "print(\"\\nCovariance Matrix (Zero Covariance):\")\n",
    "print(covariance_matrix)\n",
    "print (\"\\n\\nBooks Read and Movies Watched: A covariance close to zero indicates no linear relationship between the number of books read and the number of movies watched. \\n\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02921225",
   "metadata": {
    "papermill": {
     "duration": 0.026896,
     "end_time": "2024-07-23T14:46:27.302379",
     "exception": false,
     "start_time": "2024-07-23T14:46:27.275483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5393030,
     "sourceId": 8960144,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.312507,
   "end_time": "2024-07-23T14:46:28.050579",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-23T14:46:12.738072",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
